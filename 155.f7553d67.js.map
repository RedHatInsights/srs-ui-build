{"version":3,"file":"155.f7553d67.js","mappings":"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","sources":["webpack://srs-ui/./src/app/ServiceRegistry/components/ServiceRegistryMapping/ServiceRegistryMapping.tsx","webpack://srs-ui/./src/app/components/MASPageNotFound/MASPageNotFound.tsx","webpack://srs-ui/./src/app/components/MASAlerts/MASAlerts.tsx","webpack://srs-ui/./src/app/components/MASAlerts/MASAlertToastGroup.tsx","webpack://srs-ui/./src/app/components/MASErrorBoundary/MASErrorBoundary.tsx","webpack://srs-ui/./src/app/context/sharedContext.ts","webpack://srs-ui/./src/app/utils/error.ts","webpack://srs-ui/./src/app/utils/useDocumentTitle.ts","webpack://srs-ui/./src/app/utils/utils.ts","webpack://srs-ui/./src/app/constants/constants.ts","webpack://srs-ui/./src/app/Routes.tsx","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://srs-ui/./src/app/hooks/useTimeOut.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistryConnected.tsx","webpack://srs-ui/./src/app/images/Patternfly-Logo.svg","webpack://srs-ui/./src/app/AppLayout/AppLayout.tsx","webpack://srs-ui/./src/app/auth/keycloak/keycloakAuth.ts","webpack://srs-ui/./src/app/App.tsx","webpack://srs-ui/./src/app/auth/keycloak/KeycloakContext.tsx","webpack://srs-ui/./src/bootstrap/bootstrap.tsx","webpack://srs-ui/./src/i18n/i18n.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Select,\n  SelectVariant,\n  SelectOption,\n  Card,\n  CardTitle,\n  CardBody,\n  Grid,\n  GridItem,\n  SelectOptionObject,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Configuration, RegistryRest, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { EmptyState } from './EmptyState';\nimport { Loading } from './Loading';\nimport '@patternfly/patternfly/patternfly.min.css';\nimport '@patternfly/patternfly/components/Select/select.css';\nimport './styles.css';\n\nexport type ServiceRegistryMappingProps = SchemasProps & {\n  basename: string;\n  topicName: string;\n};\n\ntype SchemasProps = {\n  renderSchema: (registry: RegistryRest | undefined) => JSX.Element;\n  registry?: RegistryRest | undefined;\n};\n\nconst Schemas: React.FC<SchemasProps> = React.memo(({ renderSchema, registry }) => {\n  return (renderSchema && registry && renderSchema(registry)) || <></>;\n});\nSchemas.displayName = 'Schemas';\n\nexport const ServiceRegistryMapping: React.FC<ServiceRegistryMappingProps> = ({\n  renderSchema,\n  basename,\n  topicName,\n}) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || { srs: { apiBasePath: '' } };\n  //states\n  const [registryItems, setRegistryItems] = useState<RegistryRest[] | undefined>(undefined);\n  const [selectedRegistry, setSelectedRegistry] = useState<string | SelectOptionObject>();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [registry, setRegistry] = useState<RegistryRest>();\n\n  useEffect(() => {\n    fetchRegistries();\n  }, []);\n\n  useEffect(() => {\n    const filteredRegistry = registryItems?.filter((r) => r.name === selectedRegistry)[0];\n    setRegistry(filteredRegistry);\n  }, [selectedRegistry]);\n\n  const fetchRegistries = async () => {\n    const accessToken = await auth?.srs.getToken();\n    const api = new RegistriesApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    await api\n      .getRegistries()\n      .then((res) => {\n        const registry = res?.data;\n        setRegistryItems(registry?.items);\n      })\n      .catch((error) => {\n        //todo: handle error\n      });\n  };\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelectInstance = (\n    event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    event?.preventDefault();\n    setSelectedRegistry(selection);\n    setIsOpen(false);\n  };\n\n  const onClearSchema = () => {\n    setSelectedRegistry(undefined);\n  };\n\n  if (registryItems === undefined) {\n    return <Loading />;\n  }\n\n  if (!registryItems?.length) {\n    return <EmptyState topicName={topicName} basename={basename} />;\n  } else {\n    return (\n      <>\n        <Card>\n          <CardTitle component=\"h2\">{t('srs.service_registry_instance')}</CardTitle>\n          <CardBody>\n            <Grid hasGutter rowSpan={2}>\n              <GridItem>\n                {' '}\n                <Select\n                  id=\"registry-mapping-select\"\n                  variant={SelectVariant.typeahead}\n                  typeAheadAriaLabel={t('srs.select_instance')}\n                  placeholderText={t('srs.select_instance')}\n                  onToggle={onToggle}\n                  onSelect={onSelectInstance}\n                  selections={selectedRegistry}\n                  isOpen={isOpen}\n                  width={600}\n                  onClear={onClearSchema}\n                >\n                  {registryItems?.map((r: RegistryRest) => {\n                    return <SelectOption key={r.id} value={r.name} />;\n                  })}\n                </Select>\n              </GridItem>\n              <GridItem>\n                <Link to={basename}>{t('srs.create_service_registry_helper_text')}</Link>\n              </GridItem>\n            </Grid>\n          </CardBody>\n        </Card>\n        <br />\n        <Schemas renderSchema={renderSchema} registry={registry} />\n      </>\n    );\n  }\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/components';\n\nconst MASPageNotFound: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('return_to_home_page')}</Button>;\n  }\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{ variant: MASEmptyStateVariant.PageNotFound }}\n        titleProps={{ title: t('404_page_does_not_exist') }}\n        emptyStateBodyProps={{\n          body: t('we_cannot_find_the_page_you_are_looking_for'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { MASPageNotFound };\n","import React, { useEffect, useState } from 'react';\nimport { MASAlertToastGroup } from '@app/components';\nimport { AlertContext, AlertProps } from '@rhoas/app-services-ui-shared';\n\ntype TimeOut = {\n  key: string | undefined;\n  timeOut: ReturnType<typeof setTimeout> | undefined;\n};\n\nexport const AlertProvider: React.FunctionComponent = ({ children }) => {\n  const [alerts, setAlerts] = useState<AlertProps[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert?.id))\n      .map((alert) => {\n        const { id = '' } = alert;\n        const timeOut: ReturnType<typeof setTimeout> = setTimeout(() => hideAlert(id), 8000);\n        return { key: alert.id, timeOut } as TimeOut;\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () => timers.forEach((timer) => timer?.timeOut && clearTimeout(timer.timeOut));\n  }, [alerts]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: string | undefined) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.id !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (props: AlertProps) => {\n    const id = createId().toString();\n    setAlerts([...alerts, { ...props, id }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <MASAlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import React from 'react';\nimport { AlertProps } from '@rhoas/app-services-ui-shared';\nimport { AlertGroup, Alert, AlertActionCloseButton, AlertVariant } from '@patternfly/react-core';\n\ntype AlertToastGroupProps = {\n  alerts: AlertProps[];\n  onCloseAlert: (key: string | undefined) => void;\n};\n\nexport const MASAlertToastGroup: React.FunctionComponent<AlertToastGroupProps> = ({\n  alerts,\n  onCloseAlert,\n}: AlertToastGroupProps) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(({ id, variant, title, description, dataTestId, ...rest }) => (\n        <Alert\n          key={id}\n          isLiveRegion\n          variant={AlertVariant[variant]}\n          variantLabel=\"\"\n          title={title}\n          actionClose={<AlertActionCloseButton title={title} onClose={() => onCloseAlert(id)} />}\n          data-testid={dataTestId}\n          {...rest}\n        >\n          {description}\n        </Alert>\n      ))}\n    </AlertGroup>\n  );\n};\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/components';\nimport './MASErrorBoundary.css';\n\ntype Props = WithTranslation &\n  RouteComponentProps & {\n    children?: ReactNode;\n  };\n\ntype State = {\n  hasError?: boolean;\n};\n\nclass MASErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  onClickButton = () => {\n    const { history } = this.props;\n    this.setState({ hasError: false });\n    history && history.push('/');\n  };\n\n  render() {\n    const { t } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.UnexpectedError,\n            }}\n            emptyStateIconProps={{\n              className: 'icon-color',\n            }}\n            titleProps={{\n              title: t('common.something_went_wrong'),\n            }}\n            emptyStateBodyProps={{\n              body: t('unexpected_error'),\n            }}\n          >\n            <Button onClick={this.onClickButton}>{t('common.go_to_kafka_instances')}</Button>\n          </MASEmptyState>\n        </PageSection>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst MASErrorBoundaryComponent = withRouter(withTranslation()(MASErrorBoundary));\nexport { MASErrorBoundaryComponent as MASErrorBoundary };\n","import React, { useContext } from 'react';\n\nexport type SharedContextrops = {\n    preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n    shouldOpenCreateModal?: () => Promise<boolean>;\n    tokenEndPointUrl?:  string;\n};\n\nexport const SharedContext = React.createContext<SharedContextrops | undefined>(undefined);\nexport const useSharedContext = (): SharedContextrops | undefined => useContext(SharedContext);\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  USER_ALREADY_HAVE_TRIAL_INSTANCE = 'SRS-MGMT-13',\n  INSUFFICIENT_QUOTA = 'SRS-MGMT-14',\n  INSUFFICIENT_STANDARD_QUOTA='SRS-MGMT-7',\n  FAILED_TO_CHECK_QUOTA = 'SRS-MGMT-11',\n}\n\nexport { isServiceApiError, ErrorCodes };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { formatDistance } from 'date-fns';\n\nfunction accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\n\nconst getModalAppendTo = (): HTMLElement | undefined => document.querySelector('#qs-content') as HTMLElement || document.body;\n\nconst MAX_SERVICE_REGISTRY_NAME_LENGTH = 32;\nconst MAX_SERVICE_REGISTRY_DESC_LENGTH = 255;\n\nconst statusOptions = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n  { value: 'deleting', label: 'Deletion in progress' },\n];\n\nconst getFormattedDate = (date: string | Date, translatePostfix: string): string => {\n  date = typeof date === 'string' ? new Date(date) : date;\n  return formatDistance(date, new Date()) + ' ' + translatePostfix;\n};\n\nenum InstanceType {\n  eval = 'eval',\n  standard = 'standard',\n}\n\nexport {\n  accessibleRouteChangeHandler,\n  getModalAppendTo,\n  MAX_SERVICE_REGISTRY_NAME_LENGTH,\n  MAX_SERVICE_REGISTRY_DESC_LENGTH,\n  statusOptions,\n  getFormattedDate,\n  InstanceType\n};","const MAX_POLL_INTERVAL = 5000;\n\nexport { MAX_POLL_INTERVAL };","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler } from '@app/utils/utils';\nimport { MASPageNotFound } from '@app/components/MASPageNotFound';\nimport { useDocumentTitle } from '@app/utils/useDocumentTitle';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { ServiceRegistryConnected } from './ServiceRegistry/ServiceRegistryConnected';\n\nlet routeFocusTimer: number;\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  federatedComponent?: string;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: ServiceRegistryConnected,\n    exact: true,\n    label: 'Service Registry',\n    path: '/',\n    title: 'Service Registry',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return <Component {...rest} {...routeProps} />;\n  }\n\n  return <Route render={routeWithTitle} {...rest} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={MASPageNotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n          {...rest}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\" />\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { Configuration, RegistryListRest, RegistryRest, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig, useBasename, useAlert } from '@rhoas/app-services-ui-shared';\nimport {\n  ServiceRegistryDrawer,\n  UnauthrizedUser,\n  ServiceRegistryEmptyState,\n  ServiceRegistryTableView,\n} from './components';\nimport { ServiceRegistryHeader } from '@app/ServiceRegistry/components';\nimport { MASLoading, useRootModalContext, MODAL_TYPES, usePagination } from '@app/components';\nimport { useTimeout } from '@app/hooks';\nimport { MAX_POLL_INTERVAL } from '@app/constants';\nimport {InstanceType} from '@app/utils';\nimport { useSharedContext } from '@app/context';\nimport './ServiceRegistry.css';\n\nexport const ServiceRegistry: React.FC = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || {srs:{apiBasePath:''}};\n\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useRootModalContext();\n  const { preCreateInstance, shouldOpenCreateModal,tokenEndPointUrl } = useSharedContext() || {};\n  const {page=1, perPage=10}=usePagination() || {};\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [selectedRegistryInstance, setSelectedRegistryInstance] = useState<RegistryRest | undefined>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean>(false);\n  const [isUnauthorizedUser, setIsUnauthorizedUser] = useState<boolean>(false);\n  const [registries, setRegistries] = useState<RegistryListRest | undefined>(undefined);\n  const [registryItems, setRegistryItems] = useState<RegistryRest[] | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n\n  const hasUserTrialInstance = registryItems?.some((r) => r?.instance_type === InstanceType?.eval);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, []);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    updateServiceRegistryInstance();\n  }, [registryItems]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen = shouldOpenCreateModal && (await shouldOpenCreateModal());\n      shouldOpen && openCreateModal();\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  const updateServiceRegistryInstance = () => {\n    if (registryItems && registryItems?.length > 0) {\n      const selectedRegistryItem = registryItems?.filter(\n        (registry) => registry?.id === selectedRegistryInstance?.id\n      )[0];\n      const newState: any = { ...selectedRegistryInstance, ...selectedRegistryItem };\n      selectedRegistryItem && setSelectedRegistryInstance(newState);\n    }\n  };\n\n  const fetchRegistries = async () => {\n    const accessToken = await auth?.srs.getToken();\n    if(basePath && accessToken){\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await api\n        .getRegistries()\n        .then((res) => {\n          const registry = res?.data;\n          setRegistries(registry);\n          setRegistryItems(registry?.items);\n        })\n        .catch((error) => {\n          //todo: handle error\n        });\n    }    \n  };\n\n  useTimeout(() => fetchRegistries(), MAX_POLL_INTERVAL);\n\n  const onConnectToRegistry = (instance: RegistryRest | undefined) => {\n    setIsExpandedDrawer(true);\n    setSelectedRegistryInstance(instance);\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = (registry: RegistryRest | undefined) => {\n    const { name, status } = registry || {};\n    showModal(MODAL_TYPES.DELETE_SERVICE_REGISTRY, {\n      serviceRegistryStatus: status,\n      selectedItemData: registry,\n      fetchRegistries,\n      title: `${t('common.delete_service_registry_title')}?`,\n      confirmButtonProps: {\n        label: t('common.delete'),\n      },\n      textProps: {\n        description: t('common.delete_service_registry_description', { name }),\n      },\n    });\n  };\n\n  const getAccessToServiceRegistry = () => {\n    /**\n     * Todo: integrate get access service registry api\n     */\n  };\n\n  const openCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_REGISTRY, {\n      fetchServiceRegistries: fetchRegistries,\n      hasUserTrialInstance\n    });\n  };\n\n  const createServiceRegistry = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && openCreateModal();\n  };\n\n  if (isUnauthorizedUser) {\n    return <UnauthrizedUser getAccessToServiceRegistry={getAccessToServiceRegistry} />;\n  }\n\n  if (registryItems === undefined) {\n    return (\n      <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <MASLoading />\n      </PageSection>\n    );\n  } else {\n    if (!registryItems?.length) {\n      return (\n        <>\n          <ServiceRegistryHeader />\n          <ServiceRegistryEmptyState onCreateserviceRegistry={createServiceRegistry} />\n        </>\n      );\n    } else {\n      return (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={selectedRegistryInstance === undefined}\n          notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          onClose={onCloseDrawer}\n          registry={selectedRegistryInstance}\n        >\n          <main className=\"pf-c-page__main\">\n            <ServiceRegistryHeader\n              onConnectToRegistry={onConnectToRegistry}\n              onDeleteRegistry={onDeleteRegistry}\n              serviceRegistryDetails={selectedRegistryInstance}\n            />\n            <ServiceRegistryTableView\n              page={page}\n              perPage={perPage}\n              serviceRegistryItems={registryItems}\n              total={registries?.total}\n              onViewConnection={onConnectToRegistry}\n              onDelete={onDeleteRegistry}\n              expectedTotal={0}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              loggedInUser={loggedInUser}\n              currentUserRegistries={registryItems}\n              handleCreateModal={createServiceRegistry}\n              refresh={fetchRegistries}\n              registryDataLoaded={false}\n              isDrawerOpen={isExpandedDrawer}\n            />\n          </main>\n        </ServiceRegistryDrawer>\n      );\n    }\n  }\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { ServiceRegistry } from './ServiceRegistry';\n\nexport const ServiceRegistryConnected: React.FC = () => {\n  return <ServiceRegistry />;\n};\n","export default __webpack_public_path__ + \"f940137c.svg\";","import * as React from 'react';\nimport { NavLink, useLocation, useHistory } from 'react-router-dom';\nimport {\n  Nav,\n  NavList,\n  NavItem,\n  NavExpandable,\n  Page,\n  PageHeader,\n  PageSidebar,\n  SkipToContent,\n} from '@patternfly/react-core';\nimport { routes, IAppRoute, IAppRouteGroup } from '@app/Routes';\nimport logo from '@app/images/Patternfly-Logo.svg';\n\ntype AppLayoutProps = {\n  children: React.ReactNode;\n};\n\nconst AppLayout: React.FunctionComponent<AppLayoutProps> = ({ children }) => {\n  const [isNavOpen, setIsNavOpen] = React.useState(true);\n  const [isMobileView, setIsMobileView] = React.useState(true);\n  const [isNavOpenMobile, setIsNavOpenMobile] = React.useState(false);\n  const onNavToggleMobile = () => {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n  const onNavToggle = () => {\n    setIsNavOpen(!isNavOpen);\n  };\n  const onPageResize = (props: { mobileView: boolean; windowSize: number }) => {\n    setIsMobileView(props.mobileView);\n  };\n\n  function LogoImg() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <img src={logo} onClick={handleClick} alt=\"PatternFly Logo\" />;\n  }\n\n  const Header = (\n    <PageHeader\n      logo={<LogoImg />}\n      showNavToggle\n      isNavOpen={isNavOpen}\n      onNavToggle={isMobileView ? onNavToggleMobile : onNavToggle}\n    />\n  );\n\n  const location = useLocation();\n\n  const renderNavItem = (route: IAppRoute, index: number) => (\n    <NavItem key={`${route.label}-${index}`} id={`${route.label}-${index}`}>\n      <NavLink exact={route.exact} to={route.path} activeClassName=\"pf-m-current\">\n        {route.label}\n      </NavLink>\n    </NavItem>\n  );\n\n  const renderNavGroup = (group: IAppRouteGroup, groupIndex: number) => (\n    <NavExpandable\n      key={`${group.label}-${groupIndex}`}\n      id={`${group.label}-${groupIndex}`}\n      title={group.label}\n      isActive={group.routes.some((route) => route.path === location.pathname)}\n    >\n      {group.routes.map((route, idx) => route.label && renderNavItem(route, idx))}\n    </NavExpandable>\n  );\n\n  const Navigation = (\n    <Nav id=\"nav-primary-simple\" theme=\"dark\">\n      <NavList id=\"nav-list-simple\">\n        {routes.map(\n          (route, idx) => route.label && (!route.routes ? renderNavItem(route, idx) : renderNavGroup(route, idx))\n        )}\n      </NavList>\n    </Nav>\n  );\n\n  const Sidebar = <PageSidebar theme=\"dark\" nav={Navigation} isNavOpen={isMobileView ? isNavOpenMobile : isNavOpen} />;\n\n  const pageId = 'primary-app-container';\n\n  const PageSkipToContent = (\n    <SkipToContent\n      onClick={(event) => {\n        event.preventDefault();\n        const primaryContentContainer = document.getElementById(pageId);\n        primaryContentContainer && primaryContentContainer.focus();\n      }}\n      href={`#${pageId}`}\n    >\n      Skip to Content\n    </SkipToContent>\n  );\n  return (\n    <Page\n      mainContainerId={pageId}\n      header={Header}\n      sidebar={Sidebar}\n      onPageResize={onPageResize}\n      skipToContent={PageSkipToContent}\n    >\n      {children}\n    </Page>\n  );\n};\n\nexport { AppLayout };\n","import Keycloak, { KeycloakInstance, KeycloakTokenParsed } from 'keycloak-js';\n\nexport let keycloak: KeycloakInstance | undefined;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (): Promise<KeycloakInstance | undefined> => {\n  if (!keycloak) await init();\n  return keycloak;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (): Promise<void> => {\n  try {\n    keycloak = Keycloak();\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: 'login-required',\n      });\n    }\n  } catch {\n    keycloak = undefined;\n    console.warn('Auth: Unable to initialize keycloak. Client side will not be configured to use authentication');\n  }\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.token) return keycloak.token;\n  console.error('No keycloak token available');\n  return 'foo';\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getParsedKeyCloakToken = async (): Promise<KeycloakTokenParsed> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.tokenParsed) return keycloak.tokenParsed;\n  console.error('No keycloak token available');\n  return {} as KeycloakTokenParsed;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined): Promise<void> => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n};\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { I18nextProvider } from 'react-i18next';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport '@patternfly/patternfly/patternfly.min.css';\nimport '@patternfly/patternfly/utilities/Accessibility/accessibility.css';\nimport '@patternfly/patternfly/utilities/Sizing/sizing.css';\nimport '@patternfly/patternfly/utilities/Spacing/spacing.css';\nimport '@patternfly/patternfly/utilities/Display/display.css';\nimport '@patternfly/patternfly/utilities/Flex/flex.css';\nimport { AppLayout } from '@app/AppLayout/AppLayout';\nimport { AppRoutes } from '@app/Routes';\nimport { MASErrorBoundary, MASLoading, RootModal, AlertProvider, PaginationProvider } from '@app/components';\nimport srsi18n from '@i18n/i18n';\nimport { KeycloakAuthProvider, KeycloakContext, getKeycloakInstance } from './auth';\nimport { Config, ConfigContext, BasenameContext } from '@rhoas/app-services-ui-shared';\nimport '@app/App.css';\n\ndeclare const __BASE_PATH__: string;\nlet keycloak: Keycloak.KeycloakInstance | undefined;\n\nconst App: React.FunctionComponent = () => {\n  const [initialized, setInitialized] = React.useState(false);\n\n  // Initialize the client\n  useEffect(() => {\n    const init = async () => {\n      keycloak = await getKeycloakInstance();\n      setInitialized(true);\n    };\n    init();\n  }, []);\n\n  if (!initialized) return <MASLoading />;\n\n  return (\n    <ConfigContext.Provider\n      value={\n        {\n          srs: {\n            apiBasePath: __BASE_PATH__,\n          },\n        } as Config\n      }\n    >\n      <BasenameContext.Provider value={{ getBasename: () => '' }}>\n        <I18nextProvider i18n={srsi18n}>\n          <AlertProvider>\n            <KeycloakContext.Provider value={{ keycloak, profile: keycloak?.profile }}>\n              <KeycloakAuthProvider>\n                <Router>\n                  <React.Suspense fallback={<MASLoading />}>\n                    <MASErrorBoundary>\n                      <RootModal>\n                        <PaginationProvider>\n                          <AppLayout>\n                            <AppRoutes />\n                          </AppLayout>\n                        </PaginationProvider>\n                      </RootModal>\n                    </MASErrorBoundary>\n                  </React.Suspense>\n                </Router>\n              </KeycloakAuthProvider>\n            </KeycloakContext.Provider>\n          </AlertProvider>\n        </I18nextProvider>\n      </BasenameContext.Provider>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport { KeycloakInstance, KeycloakProfile } from 'keycloak-js';\nimport { getKeyCloakToken, getParsedKeyCloakToken } from './keycloakAuth';\nimport { Auth, AuthContext } from '@rhoas/app-services-ui-shared';\n\n// This is a context which can manage the keycloak\nexport interface IKeycloakContext {\n  keycloak?: KeycloakInstance | undefined;\n  profile?: KeycloakProfile | undefined;\n}\n\nexport const KeycloakContext = React.createContext<IKeycloakContext>({ keycloak: undefined });\n\nexport const KeycloakAuthProvider: React.FunctionComponent = (props) => {\n  const getUsername = () => {\n    return getParsedKeyCloakToken().then((token) => token['username']);\n  };\n\n  const isOrgAdmin = () => {\n    return getParsedKeyCloakToken().then((token) => token['is_org_admin']);\n  };\n\n  const authTokenContext = {\n    srs: {\n      getToken: getKeyCloakToken,\n    },\n    getUsername: getUsername,\n    isOrgAdmin\n  } as Auth;\n  return <AuthContext.Provider value={authTokenContext}>{props.children}</AuthContext.Provider>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '@app/App';\n\nif (process.env.NODE_ENV !== 'production') {\n  const config = {\n    rules: [\n      {\n        id: 'color-contrast',\n        enabled: false,\n      },\n    ],\n  };\n  // eslint-disable-next-line @typescript-eslint/no-var-requires, no-undef\n  const axe = require('react-axe');\n  axe(React, ReactDOM, 1000, config);\n}\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport detector from 'i18next-browser-languagedetector';\nimport httpBackend from 'i18next-http-backend';\nimport Pseudo from 'i18next-pseudo';\nimport dayjs from 'dayjs';\n\n// import locales for any languages you're supporting (English is included by default)\nimport 'dayjs/locale/ja';\nconst srsi18n = i18n.createInstance();\n\nconst params = new URLSearchParams(window.location.search);\nconst pseudolocalizationEnabled = params.get('pseudolocalization') === 'true';\n\ndeclare const window: Window & {\n  windowError: string;\n};\n\nsrsi18n\n  .use(new Pseudo({ enabled: pseudolocalizationEnabled, wrapped: true }))\n  // fetch json files\n  // learn more: https://github.com/i18next/i18next-http-backend\n  .use(httpBackend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(detector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      backend: {\n        loadPath: `${__webpack_public_path__}locales/{{lng}}/{{ns}}.json`,\n      },\n      fallbackLng: 'en',\n      load: 'all',\n      debug: process.env.NODE_ENV === 'development',\n      detection: { caches: [] },\n      contextSeparator: '~',\n      // add any namespaces you're using here for loading purposes\n      ns: ['public'],\n      defaultNS: 'public',\n      nsSeparator: ':',\n      keySeparator: '.',\n      postProcess: ['pseudo'],\n      interpolation: {\n        format: function (value, format, lng, options) {\n          options = options || {};\n          if (format === 'number') {\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat#Browser_compatibility\n            return new Intl.NumberFormat(lng).format(value);\n          }\n          if (value instanceof Date) {\n            if (format === 'fromNow') {\n              return dayjs(value).fromNow(options.omitSuffix === true);\n            }\n            return dayjs(value).format(format);\n          }\n          return value;\n        },\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      react: {\n        useSuspense: true,\n        wait: true,\n      },\n      saveMissing: true,\n      missingKeyHandler: function (lng, ns, key) {\n        // window.windowError = `Missing i18n key \"${key}\" in namespace \"${ns}\" and language \"${lng}.\"`;\n        // eslint-disable-next-line no-console\n        // console.error(window.windowError); // we use these in OpenShift to break tests\n      },\n    },\n    () => {\n      dayjs.locale(i18n.language);\n    }\n  );\n\nsrsi18n.on('languageChanged', function (lng) {\n  dayjs.locale(lng);\n});\n\nexport default srsi18n;\n"],"names":["Schemas","renderSchema","registry","displayName","MASPageNotFound","t","useTranslation","PageSection","padding","default","isFilled","emptyStateProps","variant","titleProps","title","emptyStateBodyProps","body","history","useHistory","Button","onClick","push","AlertProvider","children","useState","alerts","setAlerts","timers","setTimers","useEffect","timersKeys","map","timer","key","timeOuts","filter","alert","includes","id","timeOut","setTimeout","hideAlert","forEach","clearTimeout","el","AlertContext","value","addAlert","props","Date","getTime","toString","MASAlertToastGroup","onCloseAlert","AlertGroup","isToast","description","dataTestId","rest","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","onClose","state","hasError","onClickButton","setState","getDerivedStateFromError","_","componentDidCatch","error","errorInfo","console","render","this","MASEmptyState","emptyStateIconProps","className","Component","MASErrorBoundaryComponent","withRouter","withTranslation","SharedContext","undefined","useSharedContext","useContext","ErrorCodes","isServiceApiError","response","data","code","useDocumentTitle","originalTitle","document","accessibleRouteChangeHandler","window","mainContainer","getElementById","focus","InstanceType","getModalAppendTo","querySelector","MAX_SERVICE_REGISTRY_NAME_LENGTH","statusOptions","label","getFormattedDate","date","translatePostfix","formatDistance","routeFocusTimer","ServiceRegistry","auth","useAuth","basePath","useConfig","srs","apiBasePath","showModal","useAlert","preCreateInstance","shouldOpenCreateModal","page","perPage","isExpandedDrawer","setIsExpandedDrawer","selectedRegistryInstance","setSelectedRegistryInstance","notRequiredDrawerContentBackground","isUnauthorizedUser","registries","setRegistries","registryItems","setRegistryItems","loggedInUser","setLoggedInUser","orderBy","setOrderBy","hasUserTrialInstance","some","r","instance_type","fetchRegistries","getUsername","then","username","updateServiceRegistryInstance","openCreateModal","callback","delay","savedCallback","length","selectedRegistryItem","newState","getToken","accessToken","RegistriesApi","Configuration","getRegistries","res","items","catch","useRef","current","clearInterval","onConnectToRegistry","instance","onDeleteRegistry","name","status","serviceRegistryStatus","selectedItemData","confirmButtonProps","textProps","fetchServiceRegistries","createServiceRegistry","open","getAccessToServiceRegistry","PageSectionVariants","isExpanded","isLoading","serviceRegistryDetails","serviceRegistryItems","total","onViewConnection","onDelete","expectedTotal","currentUserRegistries","handleCreateModal","refresh","registryDataLoaded","isDrawerOpen","onCreateserviceRegistry","routes","component","exact","path","RouteWithTitleUpdates","isAsync","lastNavigation","useLastLocation","useA11yRouteChange","Route","routeProps","PageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","LastLocationProvider","Switch","idx","keycloak","AppLayout","isNavOpen","setIsNavOpen","isMobileView","setIsMobileView","isNavOpenMobile","setIsNavOpenMobile","Header","PageHeader","logo","src","alt","showNavToggle","onNavToggle","location","useLocation","renderNavItem","index","NavItem","NavLink","to","activeClassName","Navigation","Nav","theme","NavList","group","groupIndex","NavExpandable","isActive","pathname","Sidebar","PageSidebar","nav","pageId","PageSkipToContent","SkipToContent","event","preventDefault","primaryContentContainer","href","Page","mainContainerId","header","sidebar","onPageResize","mobileView","skipToContent","getKeycloakInstance","Promise","init","onLoad","warn","getKeyCloakToken","updateToken","token","getParsedKeyCloakToken","tokenParsed","KeycloakContext","KeycloakAuthProvider","authTokenContext","isOrgAdmin","AuthContext","initialized","setInitialized","ConfigContext","__BASE_PATH__","BasenameContext","getBasename","I18nextProvider","i18n","Provider","profile","fallback","srsi18n","pseudolocalizationEnabled","URLSearchParams","search","get","use","enabled","wrapped","initReactI18next","backend","loadPath","fallbackLng","load","debug","detection","caches","contextSeparator","ns","defaultNS","nsSeparator","keySeparator","postProcess","interpolation","format","lng","options","Intl","NumberFormat","fromNow","omitSuffix","escapeValue","react","useSuspense","wait","saveMissing","missingKeyHandler","on"],"sourceRoot":""}