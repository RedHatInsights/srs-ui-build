{"version":3,"file":"7557.df2d0112.js","mappings":"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","sources":["webpack://srs-ui/./src/ServiceRegistry/dialogs/DeleteServiceRegistry/DeleteServiceRegistry.tsx"],"sourcesContent":["import { useState, FunctionComponent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  Alert,\n  AlertActionLink,\n  TextInputProps,\n} from '@patternfly/react-core';\nimport {\n  Registry,\n  RegistriesApi,\n  Configuration,\n  RegistryStatusValue,\n} from '@rhoas/registry-management-sdk';\nimport {\n  useAuth,\n  useConfig,\n  useBasename,\n  useAlert,\n  AlertVariant,\n} from '@rhoas/app-services-ui-shared';\nimport {\n  MASDeleteModal,\n  BaseModalProps,\n  DeleteServiceRegistryProps,\n} from '@app/components';\nimport { isServiceApiError } from '@app/utils';\n\nconst DeleteServiceRegistry: FunctionComponent<\n  BaseModalProps & DeleteServiceRegistryProps\n> = ({\n  title = '',\n  confirmButtonProps,\n  status,\n  registry,\n  fetchServiceRegistries,\n  shouldRedirect,\n  renderDownloadArtifacts,\n  hideModal,\n}) => {\n  const { t } = useTranslation(['service-registry', 'common']);\n  const { addAlert } = useAlert();\n  const history = useHistory();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig();\n  const basename = useBasename();\n  const selectedInstanceName = registry?.name;\n\n  const [instanceNameInput, setInstanceNameInput] = useState<string>();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const [isDownloaded, setIsDownloaded] = useState<boolean>(false);\n\n  const onClickDownload = () => {\n    setIsDownloaded(true);\n  };\n\n  const [isChecked, setIsChecked] = useState<boolean>(false);\n\n  const onChangeCheckbox = () => {\n    setIsChecked(!isChecked);\n  };\n\n  const handleInstanceName = (value: string) => {\n    setInstanceNameInput(value);\n  };\n\n  const isConfirmButtonDisabled = () => {\n    if (status?.toLowerCase() === RegistryStatusValue.Ready) {\n      if (\n        instanceNameInput?.toLowerCase() ===\n          selectedInstanceName?.toLowerCase() &&\n        isChecked\n      ) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  };\n\n  const onKeyPress: TextInputProps['onKeyPress'] = (event) => {\n    if (event.key === 'Enter' && !isConfirmButtonDisabled() && registry) {\n      deleteRegistry(registry);\n    }\n  };\n\n  const handleToggle = () => {\n    setInstanceNameInput('');\n    hideModal();\n  };\n\n  const handleServerError = (error: Error) => {\n    let message: string | undefined;\n    if (isServiceApiError(error)) {\n      message = error.response?.data.reason;\n    }\n    addAlert({\n      title: t('common:something_went_wrong'),\n      variant: AlertVariant.danger,\n      description: message,\n    });\n  };\n\n  const deleteRegistry = async (registry: Registry) => {\n    const { id, name } = registry;\n    const accessToken = await auth?.srs.getToken();\n    if (id) {\n      setLoading(true);\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      await api\n        .deleteRegistry(id)\n        .then(() => {\n          setLoading(false);\n          addAlert({\n            title: t('service_registry_deletion_success_message', { name }),\n            variant: AlertVariant.success,\n          });\n          if (shouldRedirect) {\n            history.push(basename.getBasename());\n          } else {\n            fetchServiceRegistries && fetchServiceRegistries();\n          }\n          handleToggle();\n        })\n        .catch((error) => {\n          setLoading(false);\n          handleServerError(error);\n        });\n    }\n  };\n\n  const description = (\n    <>\n      <TextContent className='pf-u-mb-md pf-u-mb-xs'>\n        <Text component={TextVariants.p}>\n          <span\n            dangerouslySetInnerHTML={{\n              __html: t('delete_service_registry_description', {\n                name: selectedInstanceName,\n              }),\n            }}\n          />\n        </Text>\n      </TextContent>\n      <Alert\n        variant='info'\n        isInline\n        className='pf-u-mb-lg'\n        title={t('delete_instance_alert_header')}\n        actionLinks={\n          <AlertActionLink onClick={onClickDownload}>\n            {renderDownloadArtifacts &&\n              registry &&\n              renderDownloadArtifacts(registry, t('download_artifacts'))}\n          </AlertActionLink>\n        }\n      >\n        {t('delete_instance_alert_body')}\n      </Alert>\n    </>\n  );\n\n  return (\n    <MASDeleteModal\n      isModalOpen={true}\n      title={title}\n      confirmButtonProps={{\n        isDisabled: isConfirmButtonDisabled(),\n        'data-testid': 'modalDeleteRegistry-buttonDelete',\n        ...confirmButtonProps,\n        onClick: deleteRegistry,\n        isLoading: loading,\n      }}\n      handleModalToggle={handleToggle}\n      textProps={description}\n      selectedItemData={registry}\n      textInputProps={{\n        showTextInput: status?.toLowerCase() === RegistryStatusValue.Ready,\n        label: t('service_registry_name_label', {\n          name: selectedInstanceName,\n        }),\n        value: instanceNameInput,\n        onChange: handleInstanceName,\n        onKeyPress,\n        autoFocus: true,\n      }}\n      checkboxProps={{\n        id: 'checkbox',\n        isDownloaded: isDownloaded,\n        isChecked: isChecked,\n        onChange: onChangeCheckbox,\n      }}\n    ></MASDeleteModal>\n  );\n};\n\nexport { DeleteServiceRegistry };\nexport default DeleteServiceRegistry;\n"],"names":["DeleteServiceRegistry","title","confirmButtonProps","status","registry","fetchServiceRegistries","shouldRedirect","renderDownloadArtifacts","hideModal","t","useTranslation","addAlert","useAlert","history","useHistory","auth","useAuth","srs","apiBasePath","basePath","useConfig","basename","useBasename","selectedInstanceName","name","instanceNameInput","setInstanceNameInput","useState","loading","setLoading","isDownloaded","setIsDownloaded","isChecked","setIsChecked","isConfirmButtonDisabled","toLowerCase","RegistryStatusValue","handleToggle","deleteRegistry","id","accessToken","getToken","api","RegistriesApi","Configuration","then","variant","AlertVariant","push","getBasename","catch","error","message","response","data","reason","description","handleServerError","TextContent","className","Text","component","TextVariants","dangerouslySetInnerHTML","__html","Alert","isInline","actionLinks","AlertActionLink","onClick","isModalOpen","isDisabled","isLoading","handleModalToggle","textProps","selectedItemData","textInputProps","showTextInput","label","value","onChange","onKeyPress","event","key","autoFocus","checkboxProps"],"sourceRoot":""}