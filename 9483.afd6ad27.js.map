{"version":3,"file":"9483.afd6ad27.js","mappings":"qNAAO,MAAMA,EAIXC,cACEC,KAAKC,KAAO,GACZD,KAAKE,YAAc,I,8CCMhB,MAAMC,EAAkC,EAC7CC,MAAAA,EACAC,iCAAAA,EACAC,aAAAA,EACAC,qBAAAA,MAEA,MAAM,EAAEC,IAAM,IAAAC,gBAAe,qBACvB,KAAEC,EAAI,cAAEC,GAAkBP,GAAS,GACnCQ,EAAWF,MAAAA,OAAI,EAAJA,EAAMG,IAAa,OAAT,EAAAC,gBAAS,IAAT,EAAAA,eAAS,EAAT,EAAAA,UAAA,KAE3B,QAAcC,IAAVX,GAAuBE,EACzB,OACE,SAAC,EAAAU,MAAK,CACJC,UAAU,aACVC,QAAS,EAAAC,aAAA,KACTC,MAAOZ,EAAE,6BAA4B,YAC3B,SACVa,UAAQ,EACRC,YACE,SAAC,EAAAC,QAAO,CACNC,KAAK,KAAI,iBACM,6CAOzB,IAAIC,EAAW,GACXC,EAAa,GACbR,EAAwB,EAAAC,aAAA,OAsC5B,OAlCKP,GAAYL,GACfkB,EAAW,+BACXP,EAAU,EAAAC,aAAA,QACVO,EAAa,qCAGLd,GAAaL,EAMdK,GAAoC,KAAxBA,MAAAA,OAAQ,EAARA,EAAUe,aAC7BT,EAAU,EAAAC,aAAA,QACVM,EAAW,wCACXC,EAAa,4CARbR,EAAU,EAAAC,aAAA,KACVM,EAAW,sCAWTpB,IACFa,EAAU,EAAAC,aAAA,OACVM,EAAW,+CACXC,EAAad,EACT,0DACA,wDAIFD,IACFc,EAAW,8BACXP,EAAU,EAAAC,aAAA,OACVO,EAAa,6BAIb,8BACGD,IACC,SAAC,EAAAT,MAAK,eACJC,UAAU,aACVC,QAASA,EACTE,MAAOZ,EAAEiB,GAAS,YACR,SACVJ,UAAQ,aAEPb,EAAEkB,S,eClEb,MAAME,EAAkE,EACtEC,WAAAA,MAEA,MAAM,IAAQ,IAAApB,gBAAe,oBAEvBqB,GAAqC,IAAAC,YAAW,EAAAC,mBAEtD,OACE,UAAC,EAAAC,YAAW,YACV,SAAC,EAAAC,KAAI,eAACC,UAAW,EAAAC,aAAA,IAAe,UAC7B5B,EAAE,mCAEL,UAAC,EAAA6B,SAAQ,eAACF,UAAW,EAAAG,iBAAA,IAAmB,YACtC,UAAC,EAAAC,KAAI,eAACC,GAAI,EAAGC,GAAI,GAAIC,WAAS,cAC3Bb,IACC,UAAC,EAAAc,SAAQ,YACP,SAAC,EAAAC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,uBAEL,SAAC,EAAAoC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,gCAIT,UAAC,EAAAmC,SAAQ,YACP,SAAC,EAAAC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,yBAEL,SAAC,EAAAoC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,kCAGP,UAAC,EAAAmC,SAAQ,YACP,SAAC,EAAAC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,qBAEL,SAAC,EAAAoC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,8BAGP,UAAC,EAAAmC,SAAQ,YACP,SAAC,EAAAC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,oBAEL,SAAC,EAAAoC,aAAY,eAACT,UAAW,EAAAU,qBAAA,IAAuB,UAC7CrC,EAAE,iCAIT,SAAC,EAAAsC,OAAM,eACLC,SAAO,EACP1B,UAAQ,EACRH,QAAS,EAAA8B,cAAA,KACTC,MAAO,CAAEC,UAAW,QACpBC,QAAS,IACPrB,EAAUsB,qBACVtB,EAAUsB,oBAAoB,qCAAmC,UAGlE5C,EAAE,+CCtCP6C,EAEF,EAAGC,uBAAAA,EAAwB/C,qBAAAA,EAAsBgD,UAAAA,M,MACnD,MAAMC,GAAyC,IAAAC,UAC7C,IAAM,IAAI3D,GACV,KAEI,EAAEU,IAAM,IAAAC,gBAAe,CAAC,mBAAoB,WAC5CiD,GAAO,IAAAC,YAEXC,KAAOC,YAAaC,KAClB,IAAAC,cACE,SAAEC,IAAa,IAAAC,aAAc,IAC7B,SAAEC,IAAa,IAAAC,aAAc,IAE5BC,EAAeC,IAAoB,IAAAC,UAAkC,CAC1EC,WAAY,aAEPC,EAAkBC,IACvB,IAAAH,UAA6Bd,IACxBkB,EAAaC,IAAkB,IAAAL,WAAkB,IACjDM,EAAsBC,IAAyB,IAAAP,WAAS,IACxDlE,EAAO0E,IAAY,IAAAR,aAExBjE,EACA0E,IACE,IAAAT,WAAkB,GAEhB1D,EAA8C,QAAX,EAAAR,MAAAA,OAAK,EAALA,EAAOM,YAAI,eAAEG,IAAa,OAAT,EAAAC,gBAAS,IAAT,EAAAA,eAAS,EAAT,EAAAA,UAAA,KACpDR,OAAkCS,KAAnBX,MAAAA,OAAK,EAALA,EAAO4E,WAA+B5E,MAAAA,OAAK,EAALA,EAAO4E,SAC5DnD,GAAcjB,EACdqE,EACJ3E,GACAC,GACAF,GACCO,GAAoC,KAAxBA,MAAAA,OAAQ,EAARA,EAAUe,WAEnBuD,GAAY,IAAAC,cAAY,KAC5Bd,EAAiB,CAAEE,WAAY,YAC/BE,EAAoBjB,GACpBmB,GAAe,KACd,CAACnB,IAEE4B,GAAc,IAAAD,cAAY,KAAY,iDACtCjB,UACIA,IAAWmB,MAAMC,IACrBR,EAASQ,WAGZ,CAACpB,KAEJ,IAAAqB,YAAU,KACRH,MACC,CAACA,KAEJ,IAAAG,YAAU,KACyB,UAA7BnB,EAAcG,YAChBI,GAAe,KAEhB,CAACP,IAEJ,MAAMoB,EAAuBvF,IAC3BwE,EAAoB,OAAD,wBAAMD,GAAgB,CAAEvE,KAAAA,KAC3C,IAAIwF,GAAU,EACVxF,IAAS,+BAA+ByF,KAAKzF,EAAK0F,UACpDF,GAAU,GAGRxF,GAAQA,EAAK2F,OAAS,KACxBvB,EAAiB,CACfE,WAAY,QACZsB,QAASrF,EAAE,wDAAyD,CAClEsF,UAAW,SAGNL,GAAwC,UAA7BrB,EAAcG,WAClCF,EAAiB,CAAEE,WAAY,UAAWsB,QAAS,KACzCJ,GACVpB,EAAiB,CACfE,WAAY,QACZsB,QAASrF,EAAE,sCAKXuF,GAAoB,IAAAZ,cACvBa,I,QACC,IAAIC,EACAC,GACA,QAAkBF,KACpBC,EAAuB,QAAd,EAAAD,EAAMG,gBAAQ,eAAEzF,KAAKuF,OAC9BC,EAAqB,QAAd,EAAAF,EAAMG,gBAAQ,eAAEzF,KAAKwF,MAG5BA,IAAS,4BACTA,IAAS,uCACTA,IAAS,yBACTA,IAAS,iCAETnB,GAAoC,GAEpCf,GACEA,EAAS,CACP5C,MAAOZ,EAAE,wBACTU,QAAS,EAAAC,aAAA,OACTjB,YAAa+F,MAIrB,CAACjC,EAAUxD,IAGP4F,GAAqB,IAAAjB,cAAY,KACrC,IAAIM,GAAU,EACd,MAAM,KAAExF,GAASuE,EAyBjB,OAxBKvE,GAAwB,KAAhBA,EAAK0F,OAMN,+BAA+BD,KAAKzF,EAAK0F,UACnDF,GAAU,EACVpB,EAAiB,CACfE,WAAY,QACZsB,QAASrF,EAAE,uCATbiF,GAAU,EACVpB,EAAiB,CACfE,WAAY,QACZsB,QAASrF,EAAE,sCAUXP,EAAK2F,OAAS,OAChBH,GAAU,EACVpB,EAAiB,CACfE,WAAY,QACZsB,QAASrF,EAAE,wDAAyD,CAClEsF,UAAW,UAKVL,IACN,CAACjB,EAAkBhE,IAEhB6F,GAAwB,IAAAlB,cAAY,KAAY,iDACpD,MAAMM,EAAUW,IACVE,QAAoB5C,MAAAA,OAAI,EAAJA,EAAME,IAAI2C,WACpC,GAAKd,GAKL,GAAIa,EAAa,CACf,MAAME,EAAM,IAAI,EAAAC,cACd,IAAI,EAAAC,cAAc,CAChBJ,YAAAA,EACAxC,SAAAA,KAIJ,IACEe,GAAsB,SAChB2B,EAAIG,eAAe,CAAE1G,KAAMuE,EAAiBvE,OAAQoF,MAAK,KAC7D9B,IACA2B,IACA5B,GAA0BA,IAC1BuB,GAAsB,MAExB,MAAOmB,GACPnB,GAAsB,GACtBkB,EAAkBC,UAtBpBrB,GAAe,OAyBhB,CACDpB,EACAG,MAAAA,OAAI,EAAJA,EAAME,IACNE,EACAR,EACAyC,EACAb,EACAkB,EACA5B,IAGIoC,GAAoB,IAAAzB,cAAY,KACpCD,IACA3B,MACC,CAAC2B,EAAW3B,IAETsD,GAAsC,IAAA1B,cACzC2B,IACCA,EAAMC,iBACNV,MAEF,CAACA,IA0CH,OACE,UAAC,KAAc,eACbW,GAAG,uBACHC,aAAa,EACb7F,MAAOZ,EAAE,oCACT0G,kBAAmBN,EACnBO,SAAUd,EACV3B,YAAaA,EACb0C,mBAAmB,SACnBxC,qBAAsBA,EACtByC,iBAAiB,0CACjBC,iBAAiB,0CACjBC,iBAAkBtC,GAAoB,YAEtC,SAAC9E,EAAU,CACTC,MAAOA,EACPC,iCAAkCA,EAClCC,aAAcA,EACdC,qBAAsBA,KAExB,UAAC,EAAAiH,KAAI,eAACC,UAAW,CAAEC,QAAS,SAAUjF,GAAI,QAAO,YAC/C,UAAC,EAAAkF,SAAQ,eAACC,KAAM,CAAEF,QAAS,WAAU,WAClC,KACD,UA9DmB,KACzB,MAAM,QAAE7B,EAAO,WAAEtB,GAAeH,GAC1B,KAAEnE,GAASuE,EAEjB,OACE,UAAC,EAAAqD,KAAI,eAACC,SAAUjB,GAAY,YACxBnC,IACA,SAAC,EAAAqD,UAAS,WACR,SAAC,EAAA/G,MAAK,CACJE,QAAQ,SACRE,MAAOZ,EAAE,6BAA4B,YAC3B,SACVa,UAAQ,OAId,SAAC,EAAA2G,UAAS,eACRC,MAAM,OACNC,YAAU,EACVC,QAAQ,kBACRC,kBAAmBvC,EACnBwC,UAAW9D,EACX+D,WAAY9H,EAAE,oCAAkC,WAEhD,SAAC,EAAA+H,UAAS,CACRL,YAAU,EACVM,KAAK,OACLxB,GAAG,kBACH/G,KAAK,kBACLwI,MAAOxI,EACPyI,SAAUlD,EACV6C,UAAW9D,EACXoE,WAAW,aA8BM,SAErB,SAAC,EAAAC,QAAO,CAACC,YAAU,KACnB,SAAC,EAAAlB,SAAQ,eACPC,KAAM,CAAEF,QAAS,UACjBzG,UAAU,+CAA6C,WAEvD,SAACW,EAA0B,CAACC,WAAYA,gBAQlD","sources":["webpack://srs-ui/./src/models/service-registry.ts","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/QuotaAlert.tsx","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/ServiceRegistryInformation.tsx","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/CreateServiceRegistry.tsx"],"sourcesContent":["export class NewServiceregistry {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import { FC } from 'react';\nimport { Alert, AlertVariant, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Quota, QuotaType } from '@rhoas/app-services-ui-shared';\n\nexport type QuotaAlertProps = {\n  quota: Quota | undefined;\n  hasServiceRegistryCreationFailed?: boolean;\n  loadingQuota: boolean;\n  hasUserTrialInstance?: boolean;\n};\n\nexport const QuotaAlert: FC<QuotaAlertProps> = ({\n  quota,\n  hasServiceRegistryCreationFailed,\n  loadingQuota,\n  hasUserTrialInstance,\n}) => {\n  const { t } = useTranslation('service-registry');\n  const { data, isServiceDown } = quota || {};\n  const srsQuota = data?.get(QuotaType?.srs);\n\n  if (quota === undefined || loadingQuota) {\n    return (\n      <Alert\n        className='pf-u-mb-md'\n        variant={AlertVariant.info}\n        title={t('instance_checking_message')}\n        aria-live='polite'\n        isInline\n        customIcon={\n          <Spinner\n            size='md'\n            aria-valuetext='Checking service registry availability'\n          />\n        }\n      />\n    );\n  }\n\n  let titleKey = '';\n  let messageKey = '';\n  let variant: AlertVariant = AlertVariant.danger;\n\n  //trial quota flows\n  //if user has no standard quota and already has a trial instance\n  if (!srsQuota && hasUserTrialInstance) {\n    titleKey = 'trial_service_registry_title';\n    variant = AlertVariant.warning;\n    messageKey = 'deploy_one_instance_alert_message';\n  }\n  //if user has no standard quota and trial instances are available\n  else if (!srsQuota && !hasUserTrialInstance) {\n    variant = AlertVariant.info;\n    titleKey = 'trial_quota_service_registry_title';\n  }\n  //standard quota flows\n  //if user has standard quota but all allowed instances are already provisioned\n  else if (srsQuota && srsQuota?.remaining === 0) {\n    variant = AlertVariant.warning;\n    titleKey = 'standard_service_registry_alert_title';\n    messageKey = 'standard_service_registry_alert_message';\n  }\n\n  //if kafka creation failed for quota related\n  if (hasServiceRegistryCreationFailed) {\n    variant = AlertVariant.danger;\n    titleKey = 'service_registry_creation_failed_alert_title';\n    messageKey = srsQuota\n      ? 'standard_service_registry_creation_failed_alert_message'\n      : 'trial_service_registry_creation_failed_alert_message';\n  }\n\n  //if service down or any error\n  if (isServiceDown) {\n    titleKey = 'common:something_went_wrong';\n    variant = AlertVariant.danger;\n    messageKey = 'ams_service_down_message';\n  }\n\n  return (\n    <>\n      {titleKey && (\n        <Alert\n          className='pf-u-mb-md'\n          variant={variant}\n          title={t(titleKey)}\n          aria-live='polite'\n          isInline\n        >\n          {t(messageKey)}\n        </Alert>\n      )}\n    </>\n  );\n};\n","import { FC, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\n\nexport type ServiceRegistryInformationProps = {\n  isSrsTrial?: boolean;\n};\n\nconst ServiceRegistryInformation: FC<ServiceRegistryInformationProps> = ({\n  isSrsTrial,\n}) => {\n  const { t } = useTranslation('service-registry');\n\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>\n        {t('common:instance_information')}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          {isSrsTrial && (\n            <GridItem>\n              <TextListItem component={TextListItemVariants.dt}>\n                {t('common:duration')}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {t('common:duration_value')}\n              </TextListItem>\n            </GridItem>\n          )}\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('artifact_versions')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('artifact_versions_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('artifact_size')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('artifact_size_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('request_rate')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('request_rate_value')}\n            </TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart('getting-started-service-registry')\n          }\n        >\n          {t('common:quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { ServiceRegistryInformation };\n","import {\n  useState,\n  useEffect,\n  FunctionComponent,\n  useCallback,\n  useMemo,\n} from 'react';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  Flex,\n  FlexItem,\n  Divider,\n  FormProps,\n} from '@patternfly/react-core';\nimport { Configuration, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { NewServiceregistry, FormDataValidationState } from '@app/models';\nimport {\n  MASCreateModal,\n  CreateServiceRegistryProps,\n  BaseModalProps,\n} from '@app/components';\nimport { useTranslation } from 'react-i18next';\nimport {\n  isServiceApiError,\n  MAX_SERVICE_REGISTRY_NAME_LENGTH,\n  ErrorCodes,\n} from '@app/utils';\nimport {\n  useAlert,\n  AlertVariant,\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaType,\n  useQuota,\n  QuotaValue,\n} from '@rhoas/app-services-ui-shared';\nimport { QuotaAlert } from './QuotaAlert';\nimport { ServiceRegistryInformation } from './ServiceRegistryInformation';\nimport './CreateServiceRegistry.css';\n\nconst CreateServiceRegistry: FunctionComponent<\n  BaseModalProps & CreateServiceRegistryProps\n> = ({ fetchServiceRegistries, hasUserTrialInstance, hideModal }) => {\n  const newServiceRegistry: NewServiceregistry = useMemo(\n    () => new NewServiceregistry(),\n    []\n  );\n  const { t } = useTranslation(['service-registry', 'common']);\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert() || {};\n  const { getQuota } = useQuota() || {};\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({\n    fieldState: 'default',\n  });\n  const [registryFormData, setRegistryFormData] =\n    useState<NewServiceregistry>(newServiceRegistry);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [quota, setQuota] = useState<Quota>();\n  const [\n    hasServiceRegistryCreationFailed,\n    setHasServiceRegistryCreationFailed,\n  ] = useState<boolean>(false);\n\n  const srsQuota: QuotaValue | undefined = quota?.data?.get(QuotaType?.srs);\n  const loadingQuota = quota?.loading === undefined ? true : quota?.loading;\n  const isSrsTrial = !srsQuota;\n  const shouldDisabledButton =\n    loadingQuota ||\n    hasUserTrialInstance ||\n    hasServiceRegistryCreationFailed ||\n    (srsQuota && srsQuota?.remaining === 0);\n\n  const resetForm = useCallback(() => {\n    setNameValidated({ fieldState: 'default' });\n    setRegistryFormData(newServiceRegistry);\n    setIsFormValid(true);\n  }, [newServiceRegistry]);\n\n  const manageQuota = useCallback(async () => {\n    if (getQuota) {\n      await getQuota().then((res) => {\n        setQuota(res);\n      });\n    }\n  }, [getQuota]);\n\n  useEffect(() => {\n    manageQuota();\n  }, [manageQuota]);\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated]);\n\n  const handleTextInputName = (name: string) => {\n    setRegistryFormData({ ...registryFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_REGISTRY_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('service_registry_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_REGISTRY_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('input_filed_invalid_helper_text'),\n      });\n    }\n  };\n\n  const handleServerError = useCallback(\n    (error: unknown) => {\n      let reason: string | undefined;\n      let code: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n        code = error.response?.data.code;\n      }\n      if (\n        code === ErrorCodes.FAILED_TO_CHECK_QUOTA ||\n        code === ErrorCodes.USER_ALREADY_HAVE_TRIAL_INSTANCE ||\n        code === ErrorCodes.INSUFFICIENT_QUOTA ||\n        code === ErrorCodes.INSUFFICIENT_STANDARD_QUOTA\n      ) {\n        setHasServiceRegistryCreationFailed(true);\n      } else {\n        addAlert &&\n          addAlert({\n            title: t('something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    },\n    [addAlert, t]\n  );\n\n  const validateCreateForm = useCallback(() => {\n    let isValid = true;\n    const { name } = registryFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common:this_is_a_required_field'),\n      });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('input_filed_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_REGISTRY_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('service_registry_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_REGISTRY_NAME_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  }, [registryFormData, t]);\n\n  const createServiceRegistry = useCallback(async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.srs.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    if (accessToken) {\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      try {\n        setCreationInProgress(true);\n        await api.createRegistry({ name: registryFormData.name }).then(() => {\n          hideModal();\n          resetForm();\n          fetchServiceRegistries && fetchServiceRegistries();\n          setCreationInProgress(false);\n        });\n      } catch (error) {\n        setCreationInProgress(false);\n        handleServerError(error);\n      }\n    }\n  }, [\n    hideModal,\n    auth?.srs,\n    basePath,\n    fetchServiceRegistries,\n    handleServerError,\n    resetForm,\n    validateCreateForm,\n    registryFormData,\n  ]);\n\n  const handleCreateModal = useCallback(() => {\n    resetForm();\n    hideModal();\n  }, [resetForm, hideModal]);\n\n  const onFormSubmit: FormProps['onSubmit'] = useCallback(\n    (event) => {\n      event.preventDefault();\n      createServiceRegistry();\n    },\n    [createServiceRegistry]\n  );\n\n  const CreateRegistryForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name } = registryFormData;\n\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert\n              variant='danger'\n              title={t('common:form_invalid_alert')}\n              aria-live='polite'\n              isInline\n            />\n          </FormAlert>\n        )}\n        <FormGroup\n          label='Name'\n          isRequired\n          fieldId='text-input-name'\n          helperTextInvalid={message}\n          validated={fieldState}\n          helperText={t('input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='text-input-name'\n            name='text-input-name'\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      id='modalCreateSRegistry'\n      isModalOpen={true}\n      title={t('create_service_registry_instance')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceRegistry}\n      isFormValid={isFormValid}\n      primaryButtonTitle='Create'\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit='modalCreateServiceRegistry-buttonSubmit'\n      dataTestIdCancel='modalCreateServiceRegistry-buttonCancel'\n      isDisabledButton={shouldDisabledButton}\n    >\n      <QuotaAlert\n        quota={quota}\n        hasServiceRegistryCreationFailed={hasServiceRegistryCreationFailed}\n        loadingQuota={loadingQuota}\n        hasUserTrialInstance={hasUserTrialInstance}\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          {' '}\n          <CreateRegistryForm />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem\n          flex={{ default: 'flex_1' }}\n          className='mk--create-instance-modal__sidebar--content'\n        >\n          <ServiceRegistryInformation isSrsTrial={isSrsTrial} />\n        </FlexItem>\n      </Flex>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceRegistry };\nexport default CreateServiceRegistry;\n"],"names":["NewServiceregistry","constructor","this","name","description","QuotaAlert","quota","hasServiceRegistryCreationFailed","loadingQuota","hasUserTrialInstance","t","useTranslation","data","isServiceDown","srsQuota","get","QuotaType","undefined","Alert","className","variant","AlertVariant","title","isInline","customIcon","Spinner","size","titleKey","messageKey","remaining","ServiceRegistryInformation","isSrsTrial","qsContext","useContext","QuickStartContext","TextContent","Text","component","TextVariants","TextList","TextListVariants","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","Button","isSmall","ButtonVariant","style","marginTop","onClick","setActiveQuickStart","CreateServiceRegistry","fetchServiceRegistries","hideModal","newServiceRegistry","useMemo","auth","useAuth","srs","apiBasePath","basePath","useConfig","addAlert","useAlert","getQuota","useQuota","nameValidated","setNameValidated","useState","fieldState","registryFormData","setRegistryFormData","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","setQuota","setHasServiceRegistryCreationFailed","loading","shouldDisabledButton","resetForm","useCallback","manageQuota","then","res","useEffect","handleTextInputName","isValid","test","trim","length","message","maxLength","handleServerError","error","reason","code","response","validateCreateForm","createServiceRegistry","accessToken","getToken","api","RegistriesApi","Configuration","createRegistry","handleCreateModal","onFormSubmit","event","preventDefault","id","isModalOpen","handleModalToggle","onCreate","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","isDisabledButton","Flex","direction","default","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","label","isRequired","fieldId","helperTextInvalid","validated","helperText","TextInput","type","value","onChange","autoFocus","Divider","isVertical"],"sourceRoot":""}