{"version":3,"file":"456.35b352ef.js","mappings":"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","sources":["webpack://srs-ui/./src/ServiceRegistry/components/ServiceRegistryMapping/ServiceRegistryMapping.tsx","webpack://srs-ui/./src/ServiceRegistry/ServiceRegistry.tsx","webpack://srs-ui/./src/constants/constants.ts","webpack://srs-ui/./src/Routes.tsx","webpack://srs-ui/./src/ServiceRegistry/ServiceRegistryConnected.tsx","webpack://srs-ui/./src/images/Patternfly-Logo.svg","webpack://srs-ui/./src/AppLayout/AppLayout.tsx","webpack://srs-ui/./src/auth/keycloak/keycloakAuth.ts","webpack://srs-ui/./src/auth/keycloak/KeycloakContext.tsx","webpack://srs-ui/./src/App.tsx","webpack://srs-ui/./src/bootstrap/bootstrap.tsx","webpack://srs-ui/./src/components/MASPageNotFound/MASPageNotFound.tsx","webpack://srs-ui/./src/components/RootModal/ModalContext.tsx","webpack://srs-ui/./src/components/RootModal/types.ts","webpack://srs-ui/./src/components/RootModal/useModal.ts","webpack://srs-ui/./src/components/MASAlerts/MASAlerts.tsx","webpack://srs-ui/./src/components/MASAlerts/MASAlertToastGroup.tsx","webpack://srs-ui/./src/components/MASErrorBoundary/MASErrorBoundary.tsx","webpack://srs-ui/./src/utils/error.ts","webpack://srs-ui/./src/utils/useDocumentTitle.ts"],"sourcesContent":["import {\n  useEffect,\n  useState,\n  memo,\n  FunctionComponent,\n  useCallback,\n} from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Select,\n  SelectVariant,\n  SelectOption,\n  Card,\n  CardTitle,\n  CardBody,\n  Grid,\n  GridItem,\n  SelectOptionObject,\n  Stack,\n  StackItem,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Configuration,\n  Registry,\n  RegistriesApi,\n} from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { EmptyState } from './EmptyState';\nimport { Loading } from './Loading';\n\nexport type ServiceRegistryMappingProps = SchemasProps & {\n  basename: string;\n  topicName: string;\n};\n\ntype SchemasProps = {\n  renderSchema: (registry: Registry | undefined) => JSX.Element;\n  registry?: Registry | undefined;\n};\n\nconst Schemas: FunctionComponent<SchemasProps> = memo(\n  ({ renderSchema, registry }) => {\n    return (renderSchema && registry && renderSchema(registry)) || <></>;\n  }\n);\nSchemas.displayName = 'Schemas';\n\nexport const ServiceRegistryMapping: React.FC<ServiceRegistryMappingProps> = ({\n  renderSchema,\n  basename,\n  topicName,\n}) => {\n  const { t } = useTranslation('service-registry');\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || { srs: { apiBasePath: '' } };\n  //states\n  const [registryItems, setRegistryItems] = useState<Registry[] | undefined>(\n    undefined\n  );\n  const [selectedRegistry, setSelectedRegistry] = useState<\n    string | SelectOptionObject\n  >();\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const [registry, setRegistry] = useState<Registry>();\n\n  const fetchRegistries = useCallback(async () => {\n    let page = 1;\n    const pageSize = 100;\n\n    const accessToken = await auth?.srs.getToken();\n    const api = new RegistriesApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    /**\n     * Api works based on pagination and return 10 records by default.\n     * Getting data by calling api mupltiple times based on page size 100 if total is greater than 100.\n     */\n    const items = await (async (): Promise<Registry[]> => {\n      const response = await api.getRegistries(page, pageSize);\n      let { items } = response?.data;\n      const { total } = response?.data;\n\n      if (total > pageSize) {\n        const n = Math.ceil(total / pageSize);\n        for (let i = 1; i < n; i++) {\n          page += 1;\n          const response = await api.getRegistries(page, pageSize);\n          items = items?.concat(response?.data.items);\n        }\n        return items;\n      } else {\n        return items;\n      }\n    })();\n\n    setRegistryItems(items);\n  }, [auth?.srs, basePath]);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, [fetchRegistries]);\n\n  useEffect(() => {\n    const filteredRegistry = registryItems?.filter(\n      (r) => r.name === selectedRegistry\n    )[0];\n    setRegistry(filteredRegistry);\n  }, [selectedRegistry, registryItems]);\n\n  const onToggle = (isOpen: boolean) => {\n    setIsOpen(isOpen);\n  };\n\n  const onSelectInstance = (\n    event: React.MouseEvent<Element, MouseEvent> | React.ChangeEvent<Element>,\n    selection: string | SelectOptionObject\n  ) => {\n    event?.preventDefault();\n    setSelectedRegistry(selection);\n    setIsOpen(false);\n  };\n\n  const onClearSchema = () => {\n    setSelectedRegistry(undefined);\n  };\n\n  if (registryItems === undefined) {\n    return <Loading />;\n  }\n\n  if (!registryItems?.length) {\n    return <EmptyState topicName={topicName} basename={basename} />;\n  } else {\n    return (\n      <Stack hasGutter>\n        <StackItem>\n          <Card>\n            <CardTitle component='h2'>\n              {t('service_registry_instance')}\n            </CardTitle>\n            <CardBody>\n              <Grid hasGutter rowSpan={2}>\n                <GridItem>\n                  {' '}\n                  <Select\n                    id='registry-mapping-select'\n                    variant={SelectVariant.typeahead}\n                    typeAheadAriaLabel={t('select_instance')}\n                    placeholderText={t('select_instance')}\n                    onToggle={onToggle}\n                    onSelect={onSelectInstance}\n                    selections={selectedRegistry}\n                    isOpen={isOpen}\n                    width={600}\n                    onClear={onClearSchema}\n                  >\n                    {registryItems?.map((r: Registry) => {\n                      return <SelectOption key={r.id} value={r.name} />;\n                    })}\n                  </Select>\n                </GridItem>\n                <GridItem>\n                  <Link to={basename}>\n                    {t('create_service_registry_helper_text')}\n                  </Link>\n                </GridItem>\n              </Grid>\n            </CardBody>\n          </Card>\n        </StackItem>\n        <StackItem>\n          <Schemas renderSchema={renderSchema} registry={registry} />\n        </StackItem>\n      </Stack>\n    );\n  }\n};\n","import { useEffect, useState, FunctionComponent, useCallback } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport {\n  Configuration,\n  RegistryList,\n  Registry,\n  RegistriesApi,\n} from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport {\n  ServiceRegistryDrawer,\n  ServiceRegistryEmptyState,\n  ServiceRegistryTableView,\n} from './components';\nimport { ServiceRegistryHeader } from '@app/ServiceRegistry/components';\nimport {\n  MASLoading,\n  useModal,\n  ModalType,\n  usePagination,\n} from '@app/components';\nimport { useInterval } from '@app/hooks';\nimport { MAX_POLL_INTERVAL } from '@app/constants';\nimport { InstanceType } from '@app/utils';\nimport { useSharedContext } from '@app/context';\nimport './ServiceRegistry.css';\n\nexport const ServiceRegistry: FunctionComponent = () => {\n  const { t } = useTranslation(['service-registry']);\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || { srs: { apiBasePath: '' } };\n\n  const { showModal: showCreateServiceRegistryModal } =\n    useModal<ModalType.CreateServiceRegistry>();\n  const { showModal: showDeleteServiceRegistryModal } =\n    useModal<ModalType.DeleteServiceRegistry>();\n  const { preCreateInstance, shouldOpenCreateModal, renderDownloadArtifacts } =\n    useSharedContext() || {};\n  const { page = 1, perPage = 10 } = usePagination() || {};\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [selectedRegistryInstance, setSelectedRegistryInstance] = useState<\n    Registry | undefined\n  >(undefined);\n  const [registries, setRegistries] = useState<RegistryList | undefined>(\n    undefined\n  );\n  const [registryItems, setRegistryItems] = useState<Registry[] | undefined>(\n    undefined\n  );\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(\n    undefined\n  );\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n\n  const hasUserTrialInstance = registryItems?.some(\n    (r) => r?.instance_type === InstanceType?.eval && r.owner === loggedInUser\n  );\n\n  const fetchRegistries = useCallback(async () => {\n    const accessToken = await auth?.srs.getToken();\n    if (basePath && accessToken) {\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      await api.getRegistries(page, perPage).then((res) => {\n        const registry = res?.data;\n        setRegistries(registry);\n        setRegistryItems(registry?.items);\n      });\n    }\n  }, [page, perPage, basePath, auth?.srs]);\n\n  const updateServiceRegistryInstance = useCallback(() => {\n    if (registryItems && registryItems?.length > 0) {\n      const selectedRegistryItem = registryItems?.filter(\n        (registry) => registry?.id === selectedRegistryInstance?.id\n      )[0];\n      const newState: any = {\n        ...selectedRegistryInstance,\n        ...selectedRegistryItem,\n      };\n      selectedRegistryItem && setSelectedRegistryInstance(newState);\n    }\n  }, [registryItems, selectedRegistryInstance]);\n\n  const openCreateModal = useCallback(() => {\n    showCreateServiceRegistryModal(ModalType.CreateServiceRegistry, {\n      fetchServiceRegistries: fetchRegistries,\n      hasUserTrialInstance,\n    });\n  }, [fetchRegistries, hasUserTrialInstance, showCreateServiceRegistryModal]);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, [fetchRegistries]);\n\n  useEffect(() => {\n    auth?.getUsername()?.then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    updateServiceRegistryInstance();\n  }, [updateServiceRegistryInstance]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen =\n        shouldOpenCreateModal && (await shouldOpenCreateModal());\n      shouldOpen && openCreateModal();\n    };\n    openModal();\n  }, [shouldOpenCreateModal, openCreateModal]);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, [page, perPage, fetchRegistries]);\n\n  useInterval(() => fetchRegistries(), MAX_POLL_INTERVAL);\n\n  const onConnectToRegistry = useCallback((instance: Registry | undefined) => {\n    setIsExpandedDrawer(true);\n    setSelectedRegistryInstance(instance);\n  }, []);\n\n  const onCloseDrawer = useCallback(() => {\n    setIsExpandedDrawer(false);\n  }, []);\n\n  const onDeleteRegistry = useCallback(\n    (registry: Registry | undefined) => {\n      const { status } = registry || {};\n      showDeleteServiceRegistryModal(ModalType.DeleteServiceRegistry, {\n        status,\n        registry,\n        fetchServiceRegistries: fetchRegistries,\n        confirmButtonProps: {\n          label: t('common:delete'),\n        },\n        renderDownloadArtifacts,\n      });\n    },\n    [\n      fetchRegistries,\n      renderDownloadArtifacts,\n      showDeleteServiceRegistryModal,\n      t,\n    ]\n  );\n\n  const createServiceRegistry = useCallback(async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && openCreateModal();\n  }, [preCreateInstance, openCreateModal]);\n\n  switch (true) {\n    case registryItems === undefined:\n      return (\n        <PageSection\n          variant={PageSectionVariants.light}\n          padding={{ default: 'noPadding' }}\n        >\n          <MASLoading />\n        </PageSection>\n      );\n    case !registryItems?.length:\n      return (\n        <>\n          <ServiceRegistryHeader />\n          <ServiceRegistryEmptyState\n            onCreateserviceRegistry={createServiceRegistry}\n          />\n        </>\n      );\n    default:\n      return (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={selectedRegistryInstance === undefined}\n          onClose={onCloseDrawer}\n          registry={selectedRegistryInstance}\n        >\n          <main className='pf-c-page__main'>\n            <ServiceRegistryHeader\n              onConnectToRegistry={onConnectToRegistry}\n              onDeleteRegistry={onDeleteRegistry}\n              serviceRegistryDetails={selectedRegistryInstance}\n            />\n            <ServiceRegistryTableView\n              page={page}\n              perPage={perPage}\n              serviceRegistryItems={registryItems || []}\n              total={registries?.total}\n              onViewConnection={onConnectToRegistry}\n              onDelete={onDeleteRegistry}\n              expectedTotal={0}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              loggedInUser={loggedInUser}\n              currentUserRegistries={registryItems}\n              handleCreateModal={createServiceRegistry}\n              refresh={fetchRegistries}\n              registryDataLoaded={false}\n              isDrawerOpen={isExpandedDrawer}\n            />\n          </main>\n        </ServiceRegistryDrawer>\n      );\n  }\n};\n","const MAX_POLL_INTERVAL = 5000;\n\nexport { MAX_POLL_INTERVAL };\n","import { Route, RouteComponentProps, Switch } from 'react-router-dom';\n// import { accessibleRouteChangeHandler } from '@app/utils/utils';\nimport { MASPageNotFound } from '@app/components/MASPageNotFound';\nimport { useDocumentTitle } from '@app/utils/useDocumentTitle';\n// import { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { ServiceRegistryConnected } from './ServiceRegistry/ServiceRegistryConnected';\n\n// let routeFocusTimer: number;\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component:\n    | React.ComponentType<RouteComponentProps<any>>\n    | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  federatedComponent?: string;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: ServiceRegistryConnected,\n    exact: true,\n    label: 'Service Registry',\n    path: '/',\n    title: 'Service Registry',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\n\n// TODO: restore when react-router-last-location officially supports react 17\n\n// const useA11yRouteChange = (isAsync: boolean) => {\n//   const lastNavigation = useLastLocation();\n//   React.useEffect(() => {\n//     if (!isAsync && lastNavigation !== null) {\n//       routeFocusTimer = accessibleRouteChangeHandler();\n//     }\n//     return () => {\n//       window.clearTimeout(routeFocusTimer);\n//     };\n//   }, [isAsync, lastNavigation]);\n// };\n\nconst RouteWithTitleUpdates = ({\n  component: Component,\n  // isAsync = false,\n  title,\n  ...rest\n}: IAppRoute) => {\n  //useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return <Component {...rest} {...routeProps} />;\n  }\n\n  return <Route render={routeWithTitle} {...rest} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={MASPageNotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [\n    ...flattened,\n    ...(route.routes ? route.routes : [route]),\n  ],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  // <LastLocationProvider>\n  <Switch>\n    {flattenedRoutes.map(\n      ({ path, exact, component, title, isAsync, ...rest }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n          {...rest}\n        />\n      )\n    )}\n    <PageNotFound title='404 Page Not Found' />\n  </Switch>\n  // </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","import { FC } from 'react';\nimport { ServiceRegistry } from './ServiceRegistry';\n\nexport const ServiceRegistryConnected: FC = () => {\n  return <ServiceRegistry />;\n};\n","export default __webpack_public_path__ + \"f940137c.svg\";","import { ReactNode, FunctionComponent, useState } from 'react';\nimport { NavLink, useLocation, useHistory } from 'react-router-dom';\nimport {\n  Nav,\n  NavList,\n  NavItem,\n  NavExpandable,\n  Page,\n  PageHeader,\n  PageSidebar,\n  SkipToContent,\n} from '@patternfly/react-core';\nimport { routes, IAppRoute, IAppRouteGroup } from '@app/Routes';\nimport logo from '@app/images/Patternfly-Logo.svg';\n\ntype AppLayoutProps = {\n  children: ReactNode;\n};\n\nconst AppLayout: FunctionComponent<AppLayoutProps> = ({ children }) => {\n  const [isNavOpen, setIsNavOpen] = useState(true);\n  const [isMobileView, setIsMobileView] = useState(true);\n  const [isNavOpenMobile, setIsNavOpenMobile] = useState(false);\n  const onNavToggleMobile = () => {\n    setIsNavOpenMobile(!isNavOpenMobile);\n  };\n  const onNavToggle = () => {\n    setIsNavOpen(!isNavOpen);\n  };\n  const onPageResize = (props: { mobileView: boolean; windowSize: number }) => {\n    setIsMobileView(props.mobileView);\n  };\n\n  function LogoImg() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <img src={logo} onClick={handleClick} alt='PatternFly Logo' />;\n  }\n\n  const Header = (\n    <PageHeader\n      logo={<LogoImg />}\n      showNavToggle\n      isNavOpen={isNavOpen}\n      onNavToggle={isMobileView ? onNavToggleMobile : onNavToggle}\n    />\n  );\n\n  const location = useLocation();\n\n  const renderNavItem = (route: IAppRoute, index: number) => (\n    <NavItem key={`${route.label}-${index}`} id={`${route.label}-${index}`}>\n      <NavLink\n        exact={route.exact}\n        to={route.path}\n        activeClassName='pf-m-current'\n      >\n        {route.label}\n      </NavLink>\n    </NavItem>\n  );\n\n  const renderNavGroup = (group: IAppRouteGroup, groupIndex: number) => (\n    <NavExpandable\n      key={`${group.label}-${groupIndex}`}\n      id={`${group.label}-${groupIndex}`}\n      title={group.label}\n      isActive={group.routes.some((route) => route.path === location.pathname)}\n    >\n      {group.routes.map(\n        (route, idx) => route.label && renderNavItem(route, idx)\n      )}\n    </NavExpandable>\n  );\n\n  const Navigation = (\n    <Nav id='nav-primary-simple' theme='dark'>\n      <NavList id='nav-list-simple'>\n        {routes.map(\n          (route, idx) =>\n            route.label &&\n            (!route.routes\n              ? renderNavItem(route, idx)\n              : renderNavGroup(route, idx))\n        )}\n      </NavList>\n    </Nav>\n  );\n\n  const Sidebar = (\n    <PageSidebar\n      theme='dark'\n      nav={Navigation}\n      isNavOpen={isMobileView ? isNavOpenMobile : isNavOpen}\n    />\n  );\n\n  const pageId = 'primary-app-container';\n\n  const PageSkipToContent = (\n    <SkipToContent\n      onClick={(event) => {\n        event.preventDefault();\n        const primaryContentContainer = document.getElementById(pageId);\n        primaryContentContainer && primaryContentContainer.focus();\n      }}\n      href={`#${pageId}`}\n    >\n      Skip to Content\n    </SkipToContent>\n  );\n  return (\n    <Page\n      mainContainerId={pageId}\n      header={Header}\n      sidebar={Sidebar}\n      onPageResize={onPageResize}\n      skipToContent={PageSkipToContent}\n    >\n      {children}\n    </Page>\n  );\n};\n\nexport { AppLayout };\n","import Keycloak, { KeycloakInstance, KeycloakTokenParsed } from 'keycloak-js';\n\nexport let keycloak: KeycloakInstance | undefined;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (): Promise<\n  KeycloakInstance | undefined\n> => {\n  if (!keycloak) await init();\n  return keycloak;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (): Promise<void> => {\n  try {\n    keycloak = Keycloak();\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: 'login-required',\n      });\n    }\n  } catch {\n    keycloak = undefined;\n    console.warn(\n      'Auth: Unable to initialize keycloak. Client side will not be configured to use authentication'\n    );\n  }\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.token) return keycloak.token;\n  console.error('No keycloak token available');\n  return 'foo';\n};\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getParsedKeyCloakToken =\n  async (): Promise<KeycloakTokenParsed> => {\n    await keycloak?.updateToken(50);\n    if (keycloak?.tokenParsed) return keycloak.tokenParsed;\n    console.error('No keycloak token available');\n    return {} as KeycloakTokenParsed;\n  };\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (\n  keycloak: Keycloak.KeycloakInstance | undefined\n): Promise<void> => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n};\n","import { FunctionComponent, createContext, ReactNode } from 'react';\nimport { KeycloakInstance, KeycloakProfile } from 'keycloak-js';\nimport { getKeyCloakToken, getParsedKeyCloakToken } from './keycloakAuth';\nimport { Auth, AuthContext } from '@rhoas/app-services-ui-shared';\n\n// This is a context which can manage the keycloak\nexport interface IKeycloakContext {\n  keycloak?: KeycloakInstance | undefined;\n  profile?: KeycloakProfile | undefined;\n}\n\nexport const KeycloakContext = createContext<IKeycloakContext>({\n  keycloak: undefined,\n});\n\nexport const KeycloakAuthProvider: FunctionComponent<{\n  children: ReactNode;\n}> = ({ children }) => {\n  const getUsername = () => {\n    return getParsedKeyCloakToken().then(\n      (token) => (token as Record<string, string>)['username']\n    );\n  };\n\n  const isOrgAdmin = () => {\n    return getParsedKeyCloakToken().then(\n      (token) => (token as Record<string, string>)['is_org_admin']\n    );\n  };\n\n  const authTokenContext = {\n    srs: {\n      getToken: getKeyCloakToken,\n    },\n    getUsername: getUsername,\n    isOrgAdmin,\n  } as unknown as Auth;\n\n  return (\n    <AuthContext.Provider value={authTokenContext}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import { useEffect, useState, Suspense, FunctionComponent } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport '@patternfly/react-core/dist/styles/base.css';\nimport '@patternfly/patternfly/patternfly.css';\nimport '@patternfly/patternfly/utilities/Accessibility/accessibility.css';\nimport '@patternfly/patternfly/utilities/Sizing/sizing.css';\nimport '@patternfly/patternfly/utilities/Spacing/spacing.css';\nimport '@patternfly/patternfly/utilities/Display/display.css';\nimport '@patternfly/patternfly/utilities/Flex/flex.css';\nimport { AppLayout } from '@app/AppLayout/AppLayout';\nimport { AppRoutes } from '@app/Routes';\nimport {\n  MASErrorBoundary,\n  MASLoading,\n  AlertProvider,\n  PaginationProvider,\n  ServiceRegistryModalLoader,\n  ModalProvider,\n} from '@app/components';\nimport {\n  KeycloakAuthProvider,\n  KeycloakContext,\n  getKeycloakInstance,\n} from './auth';\nimport {\n  Config,\n  ConfigContext,\n  BasenameContext,\n  QuotaContext,\n  // QuotaType,\n  // QuotaValue\n} from '@rhoas/app-services-ui-shared';\nimport {\n  I18nProvider,\n  ModalProvider as SharedModalProvider,\n} from '@rhoas/app-services-ui-components';\nimport { SharedContext } from '@app/context';\nimport '@app/App.css';\n\ndeclare const __BASE_PATH__: string;\nlet keycloak: Keycloak.KeycloakInstance | undefined;\n\nconst App: FunctionComponent = () => {\n  const [initialized, setInitialized] = useState(false);\n\n  // Initialize the client\n  useEffect(() => {\n    const init = async () => {\n      keycloak = await getKeycloakInstance();\n      setInitialized(true);\n    };\n    init();\n  }, []);\n\n  if (!initialized) return <MASLoading />;\n\n  return (\n    <ConfigContext.Provider\n      value={\n        {\n          srs: {\n            apiBasePath: __BASE_PATH__,\n          },\n        } as Config\n      }\n    >\n      <QuotaContext.Provider\n        value={{\n          getQuota: () =>\n            Promise.resolve({\n              data: new Map(),\n              loading: false,\n              isServiceDown: false,\n            }),\n        }}\n      >\n        <SharedContext.Provider\n          value={{\n            preCreateInstance: () => Promise.resolve(true),\n          }}\n        >\n          <BasenameContext.Provider value={{ getBasename: () => '' }}>\n            <I18nProvider\n              lng='en'\n              resources={{\n                en: {\n                  common: () =>\n                    import(\n                      '@rhoas/app-services-ui-components/locales/en/common.json'\n                    ),\n                  'service-registry': () =>\n                    import(\n                      '@rhoas/app-services-ui-components/locales/en/service-registry.json'\n                    ),\n                },\n              }}\n            >\n              <AlertProvider>\n                <KeycloakContext.Provider\n                  value={{ keycloak, profile: keycloak?.profile }}\n                >\n                  <KeycloakAuthProvider>\n                    <Router>\n                      <Suspense fallback={<MASLoading />}>\n                        <MASErrorBoundary>\n                          <PaginationProvider>\n                            <SharedModalProvider>\n                              <ModalProvider>\n                                <AppLayout>\n                                  <AppRoutes />\n                                </AppLayout>\n                                <ServiceRegistryModalLoader />\n                              </ModalProvider>\n                            </SharedModalProvider>\n                          </PaginationProvider>\n                        </MASErrorBoundary>\n                      </Suspense>\n                    </Router>\n                  </KeycloakAuthProvider>\n                </KeycloakContext.Provider>\n              </AlertProvider>\n            </I18nProvider>\n          </BasenameContext.Provider>\n        </SharedContext.Provider>\n      </QuotaContext.Provider>\n    </ConfigContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '@app/App';\n\nif (process.env.NODE_ENV !== 'production') {\n  const config = {\n    rules: [\n      {\n        id: 'color-contrast',\n        enabled: false,\n      },\n    ],\n  };\n  // eslint-disable-next-line @typescript-eslint/no-var-requires, no-undef\n  const axe = require('react-axe');\n  axe(React, ReactDOM, 1000, config);\n}\n\nReactDOM.render(<App />, document.getElementById('root') as HTMLElement);\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/components';\n\nconst MASPageNotFound: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return <Button onClick={handleClick}>{t('return_to_home_page')}</Button>;\n  }\n\n  return (\n    <PageSection padding={{ default: 'noPadding' }} isFilled>\n      <MASEmptyState\n        emptyStateProps={{ variant: MASEmptyStateVariant.PageNotFound }}\n        titleProps={{ title: t('404_page_does_not_exist') }}\n        emptyStateBodyProps={{\n          body: t('we_cannot_find_the_page_you_are_looking_for'),\n        }}\n      >\n        <GoHomeBtn />\n      </MASEmptyState>\n    </PageSection>\n  );\n};\n\nexport { MASPageNotFound };\n","import {\n  FunctionComponent,\n  MutableRefObject,\n  Suspense,\n  ReactNode,\n  useRef,\n  useState,\n  createContext,\n} from 'react';\nimport { ModalProps, Modal } from '@patternfly/react-core';\nimport { Loading } from '@rhoas/app-services-ui-components';\nimport {\n  ModalType,\n  ModalContextProps,\n  ActiveModalProps,\n  ModalRegistry,\n  ModalRegistryEntry,\n} from './types';\n\ntype ModalWrapperProps<T extends ModalType> = {\n  activeModal?: ActiveModalProps<T>;\n  hideModal: () => void;\n  modalRegistry: MutableRefObject<ModalRegistry>;\n};\n\ntype FallbackModalProps<T extends ModalType> = Pick<ModalProps, 'variant'> &\n  Pick<ModalWrapperProps<T>, 'hideModal'> &\n  Pick<ModalProps, 'title'>;\n\nconst FallbackModal: FunctionComponent<FallbackModalProps<ModalType>> = ({\n  variant,\n  hideModal,\n  title,\n}) => {\n  return (\n    <Modal\n      id='fallback-modal'\n      variant={variant}\n      isOpen={true}\n      aria-label={'fallback modal'}\n      showClose={true}\n      aria-describedby='modal-message'\n      onClose={hideModal}\n      title={title}\n      children={\n        <Loading\n          bullseyeProps={{\n            className: 'pf-u-p-xl',\n          }}\n        />\n      }\n    />\n  );\n};\n\nconst ModalWrapper: FunctionComponent<ModalWrapperProps<ModalType>> = ({\n  activeModal,\n  hideModal,\n  modalRegistry,\n}) => {\n  if (activeModal === undefined) {\n    return <></>;\n  }\n\n  const entry = modalRegistry.current[\n    activeModal.modalType\n  ] as ModalRegistryEntry<ModalType>;\n\n  const ModalComponent = entry.lazyComponent;\n  return (\n    <Suspense\n      fallback={\n        <FallbackModal\n          hideModal={hideModal}\n          variant={entry.variant}\n          title={entry.title}\n        />\n      }\n    >\n      <ModalComponent\n        hideModal={hideModal}\n        title={entry.title}\n        variant={entry.variant}\n        {...activeModal.modalProps}\n      />\n    </Suspense>\n  );\n};\n\nexport const ModalContext = createContext<\n  ModalContextProps<ModalType> | undefined\n>(undefined);\n\nexport const ModalProvider: FunctionComponent<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [activeModal, setActiveModal] = useState<\n    ActiveModalProps<ModalType> | undefined\n  >();\n  const modalRegistry = useRef<ModalRegistry>({} as ModalRegistry);\n\n  const modalProps: ModalContextProps<ModalType> = {\n    registerModals: (modals) => {\n      modalRegistry.current = { ...modalRegistry, ...modals };\n    },\n\n    hideModal: () => {\n      setActiveModal(undefined);\n    },\n\n    showModal: (modalType, modalProps) => {\n      setActiveModal({\n        modalType,\n        modalProps,\n      });\n    },\n  };\n\n  return (\n    <>\n      <ModalWrapper\n        activeModal={activeModal}\n        hideModal={modalProps.hideModal}\n        modalRegistry={modalRegistry}\n      />\n      <ModalContext.Provider value={modalProps}>\n        {children}\n      </ModalContext.Provider>\n    </>\n  );\n};\n","import { Registry, RegistryStatusValue } from '@rhoas/registry-management-sdk';\n\nexport type CreateServiceRegistryProps = {\n  hasUserTrialInstance: boolean | undefined;\n  fetchServiceRegistries: () => Promise<void>;\n};\n\nexport type DeleteServiceRegistryProps = {\n  shouldRedirect?: boolean;\n  status: RegistryStatusValue | undefined;\n  registry: Registry | undefined;\n  fetchServiceRegistries?: () => Promise<void>;\n  renderDownloadArtifacts?: (\n    registry: Registry,\n    downloadLabel: string\n  ) => string;\n  confirmButtonProps: {\n    label: string;\n  };\n};\n\nexport enum ModalType {\n  CreateServiceRegistry = 'CreateServiceRegistry',\n  DeleteServiceRegistry = 'DeleteServiceRegistry',\n}\n\n// A map of modal types to their props\nexport interface ModalTypePropsMap {\n  [ModalType.CreateServiceRegistry]: CreateServiceRegistryProps;\n  [ModalType.DeleteServiceRegistry]: DeleteServiceRegistryProps;\n}\n\nexport type ModalContextProps<T extends ModalType> = {\n  registerModals: (modals: ModalRegistry) => void;\n  showModal: (modalType: ModalType, modalProps: ModalTypePropsMap[T]) => void;\n  hideModal: () => void;\n};\n\nexport type ActiveModalProps<T extends ModalType> = {\n  modalType: T;\n  modalProps: ModalTypePropsMap[T];\n};\n\n// Properties available to all Modal components\nexport type BaseModalProps = {\n  hideModal: () => void;\n  title?: string;\n  variant?: 'small' | 'medium' | 'large' | 'default';\n};\n\nexport type ModalRegistryEntry<T extends ModalType> = {\n  lazyComponent: React.LazyExoticComponent<\n    React.FunctionComponent<ModalTypePropsMap[T] & BaseModalProps>\n  >;\n} & Pick<BaseModalProps, 'variant' | 'title'>;\n\nexport type ModalRegistry = {\n  [T in ModalType]?: ModalRegistryEntry<T>;\n};\n","import { useContext } from 'react';\nimport { ModalType, ModalContextProps } from './types';\nimport { ModalContext } from './ModalContext';\n\nexport const useModal = <T extends ModalType>(): ModalContextProps<T> => {\n  const answer = useContext(ModalContext);\n  if (answer === undefined) {\n    throw new Error('not inside modal provider');\n  }\n  return answer;\n};\n","import { useEffect, useState, FunctionComponent, ReactNode } from 'react';\nimport { MASAlertToastGroup } from '@app/components';\nimport { AlertContext, AlertProps } from '@rhoas/app-services-ui-shared';\n\ntype TimeOut = {\n  key: string | undefined;\n  timeOut: ReturnType<typeof setTimeout> | undefined;\n};\n\nexport const AlertProvider: FunctionComponent<{ children: ReactNode }> = ({\n  children,\n}) => {\n  const [alerts, setAlerts] = useState<AlertProps[]>([]);\n  const [timers, setTimers] = useState<TimeOut[]>([]);\n\n  useEffect(() => {\n    const timersKeys = timers.map((timer) => timer.key);\n    const timeOuts = alerts\n      .filter((alert) => !timersKeys.includes(alert?.id))\n      .map((alert) => {\n        const { id = '' } = alert;\n        const timeOut: ReturnType<typeof setTimeout> = setTimeout(\n          () => hideAlert(id),\n          8000\n        );\n        return { key: alert.id, timeOut } as TimeOut;\n      });\n    setTimers([...timers, ...timeOuts]);\n    return () =>\n      timers.forEach((timer) => timer?.timeOut && clearTimeout(timer.timeOut));\n  }, [alerts, timers]);\n\n  const createId = () => new Date().getTime();\n\n  const hideAlert = (key: string | undefined) => {\n    setAlerts((alerts) => [...alerts.filter((el) => el.id !== key)]);\n    setTimers((timers) => [...timers.filter((timer) => timer.key === key)]);\n  };\n\n  const addAlert = (props: AlertProps) => {\n    const id = createId().toString();\n    setAlerts([...alerts, { ...props, id }]);\n  };\n\n  return (\n    <AlertContext.Provider value={{ addAlert }}>\n      <MASAlertToastGroup alerts={alerts} onCloseAlert={hideAlert} />\n      {children}\n    </AlertContext.Provider>\n  );\n};\n","import { FunctionComponent } from 'react';\nimport { AlertProps } from '@rhoas/app-services-ui-shared';\nimport {\n  AlertGroup,\n  Alert,\n  AlertActionCloseButton,\n  AlertVariant,\n} from '@patternfly/react-core';\n\ntype AlertToastGroupProps = {\n  alerts: AlertProps[];\n  onCloseAlert: (key: string | undefined) => void;\n};\n\nexport const MASAlertToastGroup: FunctionComponent<AlertToastGroupProps> = ({\n  alerts,\n  onCloseAlert,\n}: AlertToastGroupProps) => {\n  return (\n    <AlertGroup isToast>\n      {alerts.map(\n        ({ id, variant, title, description, dataTestId, ...rest }) => (\n          <Alert\n            key={id}\n            isLiveRegion\n            variant={AlertVariant[variant]}\n            variantLabel=''\n            title={title}\n            actionClose={\n              <AlertActionCloseButton\n                title={title}\n                onClose={() => onCloseAlert(id)}\n              />\n            }\n            data-testid={dataTestId}\n            {...rest}\n          >\n            {description}\n          </Alert>\n        )\n      )}\n    </AlertGroup>\n  );\n};\n","import { Component, ErrorInfo, ReactNode } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/components';\nimport './MASErrorBoundary.css';\n\ntype Props = WithTranslation &\n  RouteComponentProps & {\n    children?: ReactNode;\n  };\n\ntype State = {\n  hasError?: boolean;\n};\n\nclass MASErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  onClickButton = () => {\n    const { history } = this.props;\n    this.setState({ hasError: false });\n    history && history.push('/');\n  };\n\n  render() {\n    const { t } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.UnexpectedError,\n            }}\n            emptyStateIconProps={{\n              className: 'icon-color',\n            }}\n            titleProps={{\n              title: t('common:something_went_wrong'),\n            }}\n            emptyStateBodyProps={{\n              body: t('unexpected_error'),\n            }}\n          >\n            <Button onClick={this.onClickButton}>\n              {t('common:go_to_kafka_instances')}\n            </Button>\n          </MASEmptyState>\n        </PageSection>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst MASErrorBoundaryComponent = withRouter(\n  withTranslation()(MASErrorBoundary)\n);\nexport { MASErrorBoundaryComponent as MASErrorBoundary };\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (\n  error: unknown\n): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  USER_ALREADY_HAVE_TRIAL_INSTANCE = 'SRS-MGMT-13',\n  INSUFFICIENT_QUOTA = 'SRS-MGMT-14',\n  INSUFFICIENT_STANDARD_QUOTA = 'SRS-MGMT-7',\n  FAILED_TO_CHECK_QUOTA = 'SRS-MGMT-11',\n}\n\nexport { isServiceApiError, ErrorCodes };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n"],"names":["Schemas","memo","renderSchema","registry","displayName","ServiceRegistry","t","useTranslation","auth","useAuth","srs","apiBasePath","basePath","useConfig","showModal","showCreateServiceRegistryModal","showDeleteServiceRegistryModal","preCreateInstance","shouldOpenCreateModal","renderDownloadArtifacts","page","perPage","isExpandedDrawer","setIsExpandedDrawer","useState","selectedRegistryInstance","setSelectedRegistryInstance","undefined","registries","setRegistries","registryItems","setRegistryItems","loggedInUser","setLoggedInUser","orderBy","setOrderBy","hasUserTrialInstance","some","r","instance_type","owner","fetchRegistries","useCallback","accessToken","getToken","api","RegistriesApi","Configuration","getRegistries","then","res","data","items","updateServiceRegistryInstance","length","selectedRegistryItem","filter","id","newState","openCreateModal","fetchServiceRegistries","useEffect","getUsername","username","onConnectToRegistry","instance","onCloseDrawer","onDeleteRegistry","status","confirmButtonProps","label","createServiceRegistry","open","PageSection","variant","PageSectionVariants","padding","default","onCreateserviceRegistry","isExpanded","isLoading","onClose","className","serviceRegistryDetails","serviceRegistryItems","total","onViewConnection","onDelete","expectedTotal","currentUserRegistries","handleCreateModal","refresh","registryDataLoaded","isDrawerOpen","routes","component","exact","path","title","RouteWithTitleUpdates","Component","rest","useDocumentTitle","Route","render","routeProps","PageNotFound","MASPageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","Switch","map","idx","isAsync","AppLayout","children","isNavOpen","setIsNavOpen","isMobileView","setIsMobileView","isNavOpenMobile","setIsNavOpenMobile","Header","PageHeader","logo","history","useHistory","src","onClick","push","alt","showNavToggle","onNavToggle","location","useLocation","renderNavItem","index","NavItem","NavLink","to","activeClassName","Navigation","Nav","theme","NavList","group","groupIndex","NavExpandable","isActive","pathname","Sidebar","PageSidebar","nav","pageId","PageSkipToContent","SkipToContent","event","preventDefault","primaryContentContainer","document","getElementById","focus","href","Page","mainContainerId","header","sidebar","onPageResize","props","mobileView","skipToContent","keycloak","getKeycloakInstance","init","onLoad","console","warn","getKeyCloakToken","updateToken","token","error","getParsedKeyCloakToken","tokenParsed","KeycloakContext","createContext","KeycloakAuthProvider","authTokenContext","isOrgAdmin","AuthContext","value","initialized","setInitialized","ConfigContext","__BASE_PATH__","QuotaContext","getQuota","Promise","resolve","Map","loading","isServiceDown","BasenameContext","getBasename","I18nProvider","lng","resources","en","common","Provider","profile","Suspense","fallback","isFilled","emptyStateProps","titleProps","emptyStateBodyProps","body","Button","FallbackModal","hideModal","Modal","isOpen","showClose","Loading","bullseyeProps","ModalWrapper","activeModal","modalRegistry","entry","current","modalType","ModalComponent","lazyComponent","modalProps","ModalContext","ModalProvider","setActiveModal","useRef","registerModals","modals","ModalType","useModal","answer","useContext","Error","AlertProvider","alerts","setAlerts","timers","setTimers","timersKeys","timer","key","timeOuts","alert","includes","timeOut","setTimeout","hideAlert","forEach","clearTimeout","el","AlertContext","addAlert","Date","getTime","toString","MASAlertToastGroup","onCloseAlert","AlertGroup","isToast","description","dataTestId","Alert","isLiveRegion","AlertVariant","variantLabel","actionClose","AlertActionCloseButton","state","hasError","onClickButton","this","setState","static","componentDidCatch","errorInfo","MASEmptyState","emptyStateIconProps","MASErrorBoundaryComponent","withRouter","withTranslation","isServiceApiError","response","code","ErrorCodes","originalTitle"],"sourceRoot":""}