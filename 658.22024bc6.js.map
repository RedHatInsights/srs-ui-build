{"version":3,"file":"658.22024bc6.js","mappings":"6OAcMA,EAAoD,SAAC,G,IAAEC,EAAM,SAAEC,EAAY,eACvEC,GAAM,IAAAC,kBAAgB,EACxBC,GAAO,IAAAC,WAESC,GAClB,IAAAC,aAAW,gBACPC,GAAa,IAAAC,aAAiC,SAC9CC,GAAc,UAAqB,UACrC,GAA0C,IAAAC,WAAkB,GAA3DC,EAAgB,KAAEC,EAAmB,KACtC,GAA0B,IAAAF,eAA+BG,GAAxDC,EAAQ,KAAEC,EAAW,KACtB,GAAwB,IAAAL,WAAkB,GAAzCM,EAAO,KAAEC,EAAU,MAyB1B,IAAAC,YAAU,YAvBY,gD,yEACA,SAAMf,MAAAA,OAAI,EAAJA,EAAMgB,IAAIC,Y,cAA9BC,EAAc,SACpBJ,GAAW,GACLK,EAAM,IAAI,EAAAC,cACd,IAAI,EAAAC,cAAc,CAChBH,YAAW,EACXhB,SAAQ,KAGRgB,GAAed,EACjB,GAAMe,EACHG,YAAYlB,GACZmB,MAAK,SAACC,GACLZ,EAAYY,MAAAA,OAAG,EAAHA,EAAKC,MACjBX,GAAW,MAEZY,OAAM,SAACC,GACNb,GAAW,OARb,M,OACF,S,oCAeD,IA0BH,OAAID,EAEA,kBAAC,EAAAe,YAAW,CAACC,QAAS,EAAAC,oBAAA,MAA2BC,QAAS,CAAEC,QAAS,cACnE,kBAAC,KAAU,OAMf,kBAAC,KAAqB,CACpBC,WAAYzB,EACZ0B,eAAwBxB,IAAbC,EACXwB,QAhCkB,WACpB1B,GAAoB,IAgClBE,SAAUA,GAEV,kBAAC,KAAqB,CACpByB,oBAxCsB,WAC1B3B,GAAoB,IAwChB4B,iBAjCmB,SAAC1B,GAClB,MAAmBA,GAAY,GAA7B2B,EAAI,OAAEC,EAAM,SACpBjC,EAAU,6BAAqC,CAC7CkC,gBAAgB,EAChBC,sBAAuBF,EACvBG,iBAAkB/B,EAClBgC,MAAU7C,EAAE,wCAAuC,IACnD8C,mBAAoB,CAClBC,MAAO/C,EAAE,kBAEXgD,UAAW,CACTC,YAAajD,EAAE,6CAA8C,CAAEwC,KAAI,QAuBnEzC,aAAcA,EACdmD,uBAAwBrC,IAEzBf,GAAUA,EAAOe,K,sBCzExB,QAhB4E,SAAC,G,IAC3Ef,EAAM,SACNC,EAAY,eACZoD,EAAgB,mBAEhB,OACE,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,KAAS,KACR,kBAAC,aAAsB,CAACC,MAAO,CAAEH,iBAAgB,IAC/C,kBAACtD,EAAgB,CAACC,OAAQA,EAAQC,aAAcA","sources":["webpack://srs-ui/./src/app/ServiceRegistry/ApicurioRegistry.tsx","webpack://srs-ui/./src/app/ServiceRegistry/ApicurioRegistryFederated.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { Configuration, Registry, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceRegistryDrawer, ServiceRegistryHeader } from './components';\nimport { useRootModalContext, MODAL_TYPES, MASLoading } from '@app/components';\n\nexport type ApicurioRegistryProps = {\n  render: (registry: Registry | undefined) => JSX.Element;\n  breadcrumbId: string;\n};\n\nconst ApicurioRegistry: React.FC<ApicurioRegistryProps> = ({ render, breadcrumbId }) => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig();\n  const { tenantId } = useParams<{ tenantId: string }>();\n  const { showModal } = useRootModalContext();\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [registry, setRegistry] = useState<Registry | undefined>(undefined);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const fetchRegistry = async () => {\n    const accessToken = await auth?.srs.getToken();\n    setLoading(true);\n    const api = new RegistriesApi(\n      new Configuration({\n        accessToken,\n        basePath,\n      })\n    );\n    if (accessToken && tenantId) {\n      await api\n        .getRegistry(tenantId)\n        .then((res) => {\n          setRegistry(res?.data);\n          setLoading(false);\n        })\n        .catch((error) => {\n          setLoading(false);\n          //todo: handle error\n        });\n    }\n  };\n\n  useEffect(() => {\n    fetchRegistry();\n  }, []);\n\n  const onConnectToRegistry = () => {\n    setIsExpandedDrawer(true);\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = (registry: Registry | undefined) => {\n    const { name, status } = registry || {};\n    showModal(MODAL_TYPES.DELETE_SERVICE_REGISTRY, {\n      shouldRedirect: true,\n      serviceRegistryStatus: status,\n      selectedItemData: registry,\n      title: `${t('common.delete_service_registry_title')}?`,\n      confirmButtonProps: {\n        label: t('common.delete'),\n      },\n      textProps: {\n        description: t('common.delete_service_registry_description', { name }),\n      },\n    });\n  };\n\n  if (loading) {\n    return (\n      <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <MASLoading />\n      </PageSection>\n    );\n  }\n\n  return (\n    <ServiceRegistryDrawer\n      isExpanded={isExpandedDrawer}\n      isLoading={registry === undefined}\n      onClose={onCloseDrawer}\n      registry={registry}\n    >\n      <ServiceRegistryHeader\n        onConnectToRegistry={onConnectToRegistry}\n        onDeleteRegistry={onDeleteRegistry}\n        breadcrumbId={breadcrumbId}\n        serviceRegistryDetails={registry}\n      />\n      {render && render(registry)}\n    </ServiceRegistryDrawer>\n  );\n};\n\nexport { ApicurioRegistry };\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { ApicurioRegistry, ApicurioRegistryProps } from './ApicurioRegistry';\nimport { RootModal } from '@app/components';\nimport srsi18n from '@i18n/i18n';\nimport { SharedContext, SharedContextrops } from '@app/context';\n\ntype ApicurioRegistryFederatedProps = ApicurioRegistryProps & SharedContextrops;\n\nconst ApicurioRegistryFederated: React.FC<ApicurioRegistryFederatedProps> = ({\n  render,\n  breadcrumbId,\n  tokenEndPointUrl,\n}) => {\n  return (\n    <I18nextProvider i18n={srsi18n}>\n      <RootModal>\n        <SharedContext.Provider value={{ tokenEndPointUrl }}>\n          <ApicurioRegistry render={render} breadcrumbId={breadcrumbId} />\n        </SharedContext.Provider>\n      </RootModal>\n    </I18nextProvider>\n  );\n};\n\nexport default ApicurioRegistryFederated;\n"],"names":["ApicurioRegistry","render","breadcrumbId","t","useTranslation","auth","useAuth","basePath","useConfig","tenantId","useParams","showModal","useState","isExpandedDrawer","setIsExpandedDrawer","undefined","registry","setRegistry","loading","setLoading","useEffect","srs","getToken","accessToken","api","RegistriesApi","Configuration","getRegistry","then","res","data","catch","error","PageSection","variant","PageSectionVariants","padding","default","isExpanded","isLoading","onClose","onConnectToRegistry","onDeleteRegistry","name","status","shouldRedirect","serviceRegistryStatus","selectedItemData","title","confirmButtonProps","label","textProps","description","serviceRegistryDetails","tokenEndPointUrl","I18nextProvider","i18n","value"],"sourceRoot":""}