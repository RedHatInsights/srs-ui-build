{"version":3,"file":"483.310b1fc9.js","mappings":"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","sources":["webpack://srs-ui/./src/models/service-registry.ts","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/QuotaAlert.tsx","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/ServiceRegistryInformation.tsx","webpack://srs-ui/./src/ServiceRegistry/dialogs/CreateServiceRegistry/CreateServiceRegistry.tsx"],"sourcesContent":["export class NewServiceregistry {\n  name: string;\n  description: string;\n\n  constructor() {\n    this.name = '';\n    this.description = '';\n  }\n}\n","import { FC } from 'react';\nimport { Alert, AlertVariant, Spinner } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\nimport { Quota, QuotaType } from '@rhoas/app-services-ui-shared';\n\nexport type QuotaAlertProps = {\n  quota: Quota | undefined;\n  hasServiceRegistryCreationFailed?: boolean;\n  loadingQuota: boolean;\n  hasUserTrialInstance?: boolean;\n};\n\nexport const QuotaAlert: FC<QuotaAlertProps> = ({\n  quota,\n  hasServiceRegistryCreationFailed,\n  loadingQuota,\n  hasUserTrialInstance,\n}) => {\n  const { t } = useTranslation('service-registry');\n  const { data, isServiceDown } = quota || {};\n  const srsQuota = data?.get(QuotaType?.srs);\n\n  if (quota === undefined || loadingQuota) {\n    return (\n      <Alert\n        className='pf-u-mb-md'\n        variant={AlertVariant.info}\n        title={t('instance_checking_message')}\n        aria-live='polite'\n        isInline\n        customIcon={\n          <Spinner\n            size='md'\n            aria-valuetext='Checking service registry availability'\n          />\n        }\n      />\n    );\n  }\n\n  let titleKey = '';\n  let messageKey = '';\n  let variant: AlertVariant = AlertVariant.danger;\n\n  //trial quota flows\n  //if user has no standard quota and already has a trial instance\n  if (!srsQuota && hasUserTrialInstance) {\n    titleKey = 'trial_service_registry_title';\n    variant = AlertVariant.warning;\n    messageKey = 'deploy_one_instance_alert_message';\n  }\n  //if user has no standard quota and trial instances are available\n  else if (!srsQuota && !hasUserTrialInstance) {\n    variant = AlertVariant.info;\n    titleKey = 'trial_quota_service_registry_title';\n  }\n  //standard quota flows\n  //if user has standard quota but all allowed instances are already provisioned\n  else if (srsQuota && srsQuota?.remaining === 0) {\n    variant = AlertVariant.warning;\n    titleKey = 'standard_service_registry_alert_title';\n    messageKey = 'standard_service_registry_alert_message';\n  }\n\n  //if kafka creation failed for quota related\n  if (hasServiceRegistryCreationFailed) {\n    variant = AlertVariant.danger;\n    titleKey = 'service_registry_creation_failed_alert_title';\n    messageKey = srsQuota\n      ? 'standard_service_registry_creation_failed_alert_message'\n      : 'trial_service_registry_creation_failed_alert_message';\n  }\n\n  //if service down or any error\n  if (isServiceDown) {\n    titleKey = 'common:something_went_wrong';\n    variant = AlertVariant.danger;\n    messageKey = 'ams_service_down_message';\n  }\n\n  return (\n    <>\n      {titleKey && (\n        <Alert\n          className='pf-u-mb-md'\n          variant={variant}\n          title={t(titleKey)}\n          aria-live='polite'\n          isInline\n        >\n          {t(messageKey)}\n        </Alert>\n      )}\n    </>\n  );\n};\n","import { FC, useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  TextContent,\n  Text,\n  TextVariants,\n  TextList,\n  TextListVariants,\n  TextListItem,\n  TextListItemVariants,\n  Grid,\n  GridItem,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport {\n  QuickStartContext,\n  QuickStartContextValues,\n} from '@patternfly/quickstarts';\n\nexport type ServiceRegistryInformationProps = {\n  isSrsTrial?: boolean;\n};\n\nconst ServiceRegistryInformation: FC<ServiceRegistryInformationProps> = ({\n  isSrsTrial,\n}) => {\n  const { t } = useTranslation('service-registry');\n\n  const qsContext: QuickStartContextValues = useContext(QuickStartContext);\n\n  return (\n    <TextContent>\n      <Text component={TextVariants.h3}>\n        {t('common:instance_information')}\n      </Text>\n      <TextList component={TextListVariants.dl}>\n        <Grid sm={6} lg={12} hasGutter>\n          {isSrsTrial && (\n            <GridItem>\n              <TextListItem component={TextListItemVariants.dt}>\n                {t('common:duration')}\n              </TextListItem>\n              <TextListItem component={TextListItemVariants.dd}>\n                {t('common:duration_value')}\n              </TextListItem>\n            </GridItem>\n          )}\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('artifact_versions')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('artifact_versions_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('artifact_size')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('artifact_size_value')}\n            </TextListItem>\n          </GridItem>\n          <GridItem>\n            <TextListItem component={TextListItemVariants.dt}>\n              {t('request_rate')}\n            </TextListItem>\n            <TextListItem component={TextListItemVariants.dd}>\n              {t('request_rate_value')}\n            </TextListItem>\n          </GridItem>\n        </Grid>\n        <Button\n          isSmall\n          isInline\n          variant={ButtonVariant.link}\n          style={{ marginTop: '20px' }}\n          onClick={() =>\n            qsContext.setActiveQuickStart &&\n            qsContext.setActiveQuickStart('getting-started-service-registry')\n          }\n        >\n          {t('common:quick_start_guide_message')}\n        </Button>\n      </TextList>\n    </TextContent>\n  );\n};\n\nexport { ServiceRegistryInformation };\n","import {\n  useState,\n  useEffect,\n  FunctionComponent,\n  useCallback,\n  useMemo,\n} from 'react';\nimport {\n  Alert,\n  Form,\n  FormAlert,\n  FormGroup,\n  TextInput,\n  Flex,\n  FlexItem,\n  Divider,\n  FormProps,\n} from '@patternfly/react-core';\nimport { Configuration, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { NewServiceregistry, FormDataValidationState } from '@app/models';\nimport {\n  MASCreateModal,\n  CreateServiceRegistryProps,\n  BaseModalProps,\n} from '@app/components';\nimport { useTranslation } from 'react-i18next';\nimport {\n  isServiceApiError,\n  MAX_SERVICE_REGISTRY_NAME_LENGTH,\n  ErrorCodes,\n} from '@app/utils';\nimport {\n  useAlert,\n  AlertVariant,\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaType,\n  useQuota,\n  QuotaValue,\n} from '@rhoas/app-services-ui-shared';\nimport { QuotaAlert } from './QuotaAlert';\nimport { ServiceRegistryInformation } from './ServiceRegistryInformation';\nimport './CreateServiceRegistry.css';\n\nconst CreateServiceRegistry: FunctionComponent<\n  BaseModalProps & CreateServiceRegistryProps\n> = ({ fetchServiceRegistries, hasUserTrialInstance, hideModal }) => {\n  const newServiceRegistry: NewServiceregistry = useMemo(\n    () => new NewServiceregistry(),\n    []\n  );\n  const { t } = useTranslation(['service-registry', 'common']);\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig();\n  const { addAlert } = useAlert() || {};\n  const { getQuota } = useQuota() || {};\n\n  const [nameValidated, setNameValidated] = useState<FormDataValidationState>({\n    fieldState: 'default',\n  });\n  const [registryFormData, setRegistryFormData] =\n    useState<NewServiceregistry>(newServiceRegistry);\n  const [isFormValid, setIsFormValid] = useState<boolean>(true);\n  const [isCreationInProgress, setCreationInProgress] = useState(false);\n  const [quota, setQuota] = useState<Quota>();\n  const [\n    hasServiceRegistryCreationFailed,\n    setHasServiceRegistryCreationFailed,\n  ] = useState<boolean>(false);\n\n  const srsQuota: QuotaValue | undefined = quota?.data?.get(QuotaType?.srs);\n  const loadingQuota = quota?.loading === undefined ? true : quota?.loading;\n  const isSrsTrial = !srsQuota;\n  const shouldDisabledButton =\n    loadingQuota ||\n    hasUserTrialInstance ||\n    hasServiceRegistryCreationFailed ||\n    (srsQuota && srsQuota?.remaining === 0);\n\n  const resetForm = useCallback(() => {\n    setNameValidated({ fieldState: 'default' });\n    setRegistryFormData(newServiceRegistry);\n    setIsFormValid(true);\n  }, [newServiceRegistry]);\n\n  const manageQuota = useCallback(async () => {\n    if (getQuota) {\n      await getQuota().then((res) => {\n        setQuota(res);\n      });\n    }\n  }, [getQuota]);\n\n  useEffect(() => {\n    manageQuota();\n  }, [manageQuota]);\n\n  useEffect(() => {\n    if (nameValidated.fieldState !== 'error') {\n      setIsFormValid(true);\n    }\n  }, [nameValidated]);\n\n  const handleTextInputName = (name: string) => {\n    setRegistryFormData({ ...registryFormData, name });\n    let isValid = true;\n    if (name && !/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n    }\n\n    if (name && name.length > MAX_SERVICE_REGISTRY_NAME_LENGTH) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('service_registry_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_REGISTRY_NAME_LENGTH,\n        }),\n      });\n    } else if (isValid && nameValidated.fieldState === 'error') {\n      setNameValidated({ fieldState: 'default', message: '' });\n    } else if (!isValid) {\n      setNameValidated({\n        fieldState: 'error',\n        message: t('input_filed_invalid_helper_text'),\n      });\n    }\n  };\n\n  const handleServerError = useCallback(\n    (error: unknown) => {\n      let reason: string | undefined;\n      let code: string | undefined;\n      if (isServiceApiError(error)) {\n        reason = error.response?.data.reason;\n        code = error.response?.data.code;\n      }\n      if (\n        code === ErrorCodes.FAILED_TO_CHECK_QUOTA ||\n        code === ErrorCodes.USER_ALREADY_HAVE_TRIAL_INSTANCE ||\n        code === ErrorCodes.INSUFFICIENT_QUOTA ||\n        code === ErrorCodes.INSUFFICIENT_STANDARD_QUOTA\n      ) {\n        setHasServiceRegistryCreationFailed(true);\n      } else {\n        addAlert &&\n          addAlert({\n            title: t('something_went_wrong'),\n            variant: AlertVariant.danger,\n            description: reason,\n          });\n      }\n    },\n    [addAlert, t]\n  );\n\n  const validateCreateForm = useCallback(() => {\n    let isValid = true;\n    const { name } = registryFormData;\n    if (!name || name.trim() === '') {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('common:this_is_a_required_field'),\n      });\n    } else if (!/^[a-z]([-a-z0-9]*[a-z0-9])?$/.test(name.trim())) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('input_filed_invalid_helper_text'),\n      });\n    }\n\n    if (name.length > MAX_SERVICE_REGISTRY_NAME_LENGTH) {\n      isValid = false;\n      setNameValidated({\n        fieldState: 'error',\n        message: t('service_registry_name_length_is_greater_than_expected', {\n          maxLength: MAX_SERVICE_REGISTRY_NAME_LENGTH,\n        }),\n      });\n    }\n\n    return isValid;\n  }, [registryFormData, t]);\n\n  const createServiceRegistry = useCallback(async () => {\n    const isValid = validateCreateForm();\n    const accessToken = await auth?.srs.getToken();\n    if (!isValid) {\n      setIsFormValid(false);\n      return;\n    }\n\n    if (accessToken) {\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n\n      try {\n        setCreationInProgress(true);\n        await api.createRegistry({ name: registryFormData.name }).then(() => {\n          hideModal();\n          resetForm();\n          fetchServiceRegistries && fetchServiceRegistries();\n          setCreationInProgress(false);\n        });\n      } catch (error) {\n        setCreationInProgress(false);\n        handleServerError(error);\n      }\n    }\n  }, [\n    hideModal,\n    auth?.srs,\n    basePath,\n    fetchServiceRegistries,\n    handleServerError,\n    resetForm,\n    validateCreateForm,\n    registryFormData,\n  ]);\n\n  const handleCreateModal = useCallback(() => {\n    resetForm();\n    hideModal();\n  }, [resetForm, hideModal]);\n\n  const onFormSubmit: FormProps['onSubmit'] = useCallback(\n    (event) => {\n      event.preventDefault();\n      createServiceRegistry();\n    },\n    [createServiceRegistry]\n  );\n\n  const CreateRegistryForm = () => {\n    const { message, fieldState } = nameValidated;\n    const { name } = registryFormData;\n\n    return (\n      <Form onSubmit={onFormSubmit}>\n        {!isFormValid && (\n          <FormAlert>\n            <Alert\n              variant='danger'\n              title={t('common:form_invalid_alert')}\n              aria-live='polite'\n              isInline\n            />\n          </FormAlert>\n        )}\n        <FormGroup\n          label='Name'\n          isRequired\n          fieldId='text-input-name'\n          helperTextInvalid={message}\n          validated={fieldState}\n          helperText={t('input_filed_invalid_helper_text')}\n        >\n          <TextInput\n            isRequired\n            type='text'\n            id='text-input-name'\n            name='text-input-name'\n            value={name}\n            onChange={handleTextInputName}\n            validated={fieldState}\n            autoFocus={true}\n          />\n        </FormGroup>\n      </Form>\n    );\n  };\n\n  return (\n    <MASCreateModal\n      id='modalCreateSRegistry'\n      isModalOpen={true}\n      title={t('create_service_registry_instance')}\n      handleModalToggle={handleCreateModal}\n      onCreate={createServiceRegistry}\n      isFormValid={isFormValid}\n      primaryButtonTitle='Create'\n      isCreationInProgress={isCreationInProgress}\n      dataTestIdSubmit='modalCreateServiceRegistry-buttonSubmit'\n      dataTestIdCancel='modalCreateServiceRegistry-buttonCancel'\n      isDisabledButton={shouldDisabledButton}\n    >\n      <QuotaAlert\n        quota={quota}\n        hasServiceRegistryCreationFailed={hasServiceRegistryCreationFailed}\n        loadingQuota={loadingQuota}\n        hasUserTrialInstance={hasUserTrialInstance}\n      />\n      <Flex direction={{ default: 'column', lg: 'row' }}>\n        <FlexItem flex={{ default: 'flex_2' }}>\n          {' '}\n          <CreateRegistryForm />\n        </FlexItem>\n        <Divider isVertical />\n        <FlexItem\n          flex={{ default: 'flex_1' }}\n          className='mk--create-instance-modal__sidebar--content'\n        >\n          <ServiceRegistryInformation isSrsTrial={isSrsTrial} />\n        </FlexItem>\n      </Flex>\n    </MASCreateModal>\n  );\n};\n\nexport { CreateServiceRegistry };\nexport default CreateServiceRegistry;\n"],"names":["NewServiceregistry","constructor","this","name","description","QuotaAlert","quota","hasServiceRegistryCreationFailed","loadingQuota","hasUserTrialInstance","t","useTranslation","data","isServiceDown","srsQuota","get","QuotaType","srs","undefined","Alert","className","variant","AlertVariant","info","title","isInline","customIcon","Spinner","size","titleKey","messageKey","danger","warning","remaining","ServiceRegistryInformation","isSrsTrial","qsContext","useContext","QuickStartContext","TextContent","Text","component","TextVariants","h3","TextList","TextListVariants","dl","Grid","sm","lg","hasGutter","GridItem","TextListItem","TextListItemVariants","dt","dd","Button","isSmall","ButtonVariant","link","style","marginTop","onClick","setActiveQuickStart","CreateServiceRegistry","fetchServiceRegistries","hideModal","newServiceRegistry","useMemo","auth","useAuth","apiBasePath","basePath","useConfig","addAlert","useAlert","getQuota","useQuota","nameValidated","setNameValidated","useState","fieldState","registryFormData","setRegistryFormData","isFormValid","setIsFormValid","isCreationInProgress","setCreationInProgress","setQuota","setHasServiceRegistryCreationFailed","loading","shouldDisabledButton","resetForm","useCallback","manageQuota","then","res","useEffect","handleTextInputName","isValid","test","trim","length","message","maxLength","handleServerError","error","reason","code","response","FAILED_TO_CHECK_QUOTA","USER_ALREADY_HAVE_TRIAL_INSTANCE","INSUFFICIENT_QUOTA","INSUFFICIENT_STANDARD_QUOTA","validateCreateForm","createServiceRegistry","accessToken","getToken","api","RegistriesApi","Configuration","createRegistry","handleCreateModal","onFormSubmit","event","preventDefault","id","isModalOpen","handleModalToggle","onCreate","primaryButtonTitle","dataTestIdSubmit","dataTestIdCancel","isDisabledButton","Flex","direction","default","FlexItem","flex","Form","onSubmit","FormAlert","FormGroup","label","isRequired","fieldId","helperTextInvalid","validated","helperText","TextInput","type","value","onChange","autoFocus","Divider","isVertical"],"sourceRoot":""}