{"version":3,"file":"961.609059ce.js","mappings":"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","sources":["webpack://srs-ui/./src/app/constants/constants.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://srs-ui/./src/app/hooks/useTimeOut.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistryFederated.tsx"],"sourcesContent":["const MAX_POLL_INTERVAL = 5000;\n\nexport { MAX_POLL_INTERVAL };","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { Configuration, RegistryList, Registry, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceRegistryDrawer, ServiceRegistryEmptyState, ServiceRegistryTableView } from './components';\nimport { ServiceRegistryHeader } from '@app/ServiceRegistry/components';\nimport { MASLoading, useRootModalContext, MODAL_TYPES, usePagination } from '@app/components';\nimport { useTimeout } from '@app/hooks';\nimport { MAX_POLL_INTERVAL } from '@app/constants';\nimport { InstanceType } from '@app/utils';\nimport { useSharedContext } from '@app/context';\nimport './ServiceRegistry.css';\n\nexport const ServiceRegistry: React.FC = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || { srs: { apiBasePath: '' } };\n\n  const { showModal } = useRootModalContext();\n  const { preCreateInstance, shouldOpenCreateModal, renderDownloadArtifacts } = useSharedContext() || {};\n  const { page = 1, perPage = 10 } = usePagination() || {};\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [selectedRegistryInstance, setSelectedRegistryInstance] = useState<Registry | undefined>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean>(false);\n  const [registries, setRegistries] = useState<RegistryList | undefined>(undefined);\n  const [registryItems, setRegistryItems] = useState<Registry[] | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n\n  const hasUserTrialInstance = registryItems?.some(\n    (r) => r?.instance_type === InstanceType?.eval && r.owner === loggedInUser\n  );\n\n  useEffect(() => {\n    fetchRegistries();\n  }, []);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    updateServiceRegistryInstance();\n  }, [registryItems]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen = shouldOpenCreateModal && (await shouldOpenCreateModal());\n      shouldOpen && openCreateModal();\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, [page, perPage]);\n\n  const updateServiceRegistryInstance = () => {\n    if (registryItems && registryItems?.length > 0) {\n      const selectedRegistryItem = registryItems?.filter(\n        (registry) => registry?.id === selectedRegistryInstance?.id\n      )[0];\n      const newState: any = { ...selectedRegistryInstance, ...selectedRegistryItem };\n      selectedRegistryItem && setSelectedRegistryInstance(newState);\n    }\n  };\n\n  const fetchRegistries = async () => {\n    const accessToken = await auth?.srs.getToken();\n    if (basePath && accessToken) {\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await api\n        .getRegistries(page, perPage)\n        .then((res) => {\n          const registry = res?.data;\n          setRegistries(registry);\n          setRegistryItems(registry?.items);\n        })\n        .catch((error) => {\n          //todo: handle error\n        });\n    }\n  };\n\n  useTimeout(() => fetchRegistries(), MAX_POLL_INTERVAL);\n\n  const onConnectToRegistry = (instance: Registry | undefined) => {\n    setIsExpandedDrawer(true);\n    setSelectedRegistryInstance(instance);\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = (registry: Registry | undefined) => {\n    const { status } = registry || {};\n    showModal(MODAL_TYPES.DELETE_SERVICE_REGISTRY, {\n      serviceRegistryStatus: status,\n      selectedItemData: registry,\n      fetchRegistries,\n      title: `${t('common.delete_service_registry_title')}?`,\n      confirmButtonProps: {\n        label: t('common.delete'),\n      },      \n      renderDownloadArtifacts\n    });\n  };\n\n  const openCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_REGISTRY, {\n      fetchServiceRegistries: fetchRegistries,\n      hasUserTrialInstance,\n    });\n  };\n\n  const createServiceRegistry = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && openCreateModal();\n  };\n\n  if (registryItems === undefined) {\n    return (\n      <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <MASLoading />\n      </PageSection>\n    );\n  } else {\n    if (!registryItems?.length) {\n      return (\n        <>\n          <ServiceRegistryHeader />\n          <ServiceRegistryEmptyState onCreateserviceRegistry={createServiceRegistry} />\n        </>\n      );\n    } else {\n      return (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={selectedRegistryInstance === undefined}\n          notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          onClose={onCloseDrawer}\n          registry={selectedRegistryInstance}\n        >\n          <main className=\"pf-c-page__main\">\n            <ServiceRegistryHeader\n              onConnectToRegistry={onConnectToRegistry}\n              onDeleteRegistry={onDeleteRegistry}\n              serviceRegistryDetails={selectedRegistryInstance}\n            />\n            <ServiceRegistryTableView\n              page={page}\n              perPage={perPage}\n              serviceRegistryItems={registryItems}\n              total={registries?.total}\n              onViewConnection={onConnectToRegistry}\n              onDelete={onDeleteRegistry}\n              expectedTotal={0}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              loggedInUser={loggedInUser}\n              currentUserRegistries={registryItems}\n              handleCreateModal={createServiceRegistry}\n              refresh={fetchRegistries}\n              registryDataLoaded={false}\n              isDrawerOpen={isExpandedDrawer}\n            />\n          </main>\n        </ServiceRegistryDrawer>\n      );\n    }\n  }\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { RootModal, PaginationProvider } from '@app/components';\nimport srsi18n from '@i18n/i18n';\nimport { SharedContext, SharedContextrops } from '@app/context';\n\ntype ServiceRegistryFederatedProps = SharedContextrops;\n\nconst ServiceRegistryFederated: React.FC<ServiceRegistryFederatedProps> = ({\n  preCreateInstance,\n  shouldOpenCreateModal,\n  tokenEndPointUrl,\n  renderDownloadArtifacts\n}) => {\n  return (\n    <I18nextProvider i18n={srsi18n}>\n      <SharedContext.Provider value={{ preCreateInstance, shouldOpenCreateModal, tokenEndPointUrl,renderDownloadArtifacts }}>\n        <RootModal>\n          <PaginationProvider>\n            <ServiceRegistry />\n          </PaginationProvider>\n        </RootModal>\n      </SharedContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default ServiceRegistryFederated;\n"],"names":["ServiceRegistry","t","useTranslation","auth","useAuth","basePath","useConfig","srs","apiBasePath","showModal","preCreateInstance","shouldOpenCreateModal","renderDownloadArtifacts","page","perPage","useState","isExpandedDrawer","setIsExpandedDrawer","undefined","selectedRegistryInstance","setSelectedRegistryInstance","notRequiredDrawerContentBackground","registries","setRegistries","registryItems","setRegistryItems","loggedInUser","setLoggedInUser","orderBy","setOrderBy","hasUserTrialInstance","some","r","instance_type","owner","useEffect","fetchRegistries","getUsername","then","username","updateServiceRegistryInstance","openCreateModal","callback","delay","savedCallback","length","selectedRegistryItem","filter","registry","id","newState","getToken","accessToken","RegistriesApi","Configuration","getRegistries","res","data","items","catch","error","useRef","current","setTimeout","clearInterval","onConnectToRegistry","instance","onDeleteRegistry","status","serviceRegistryStatus","selectedItemData","title","confirmButtonProps","label","fetchServiceRegistries","createServiceRegistry","open","PageSection","variant","PageSectionVariants","padding","default","isExpanded","isLoading","onClose","className","serviceRegistryDetails","serviceRegistryItems","total","onViewConnection","onDelete","expectedTotal","currentUserRegistries","handleCreateModal","refresh","registryDataLoaded","isDrawerOpen","onCreateserviceRegistry","tokenEndPointUrl","I18nextProvider","i18n","value"],"sourceRoot":""}