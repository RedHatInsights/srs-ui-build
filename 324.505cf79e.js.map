{"version":3,"file":"324.505cf79e.js","mappings":"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","sources":["webpack://srs-ui/./src/app/constants/constants.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://srs-ui/./src/app/hooks/useTimeOut.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistryFederated.tsx","webpack://srs-ui/./src/app/components/MASErrorBoundary/MASErrorBoundary.tsx","webpack://srs-ui/./src/app/context/sharedContext.ts","webpack://srs-ui/./src/app/utils/error.ts","webpack://srs-ui/./src/app/utils/utils.ts"],"sourcesContent":["const MAX_POLL_INTERVAL = 5000;\n\nexport { MAX_POLL_INTERVAL };","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { Configuration, RegistryListRest, RegistryRest, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig, useBasename, useAlert } from '@rhoas/app-services-ui-shared';\nimport {\n  ServiceRegistryDrawer,\n  UnauthrizedUser,\n  ServiceRegistryEmptyState,\n  ServiceRegistryTableView,\n} from './components';\nimport { ServiceRegistryHeader } from '@app/ServiceRegistry/components';\nimport { MASLoading, useRootModalContext, MODAL_TYPES, usePagination } from '@app/components';\nimport { useTimeout } from '@app/hooks';\nimport { MAX_POLL_INTERVAL } from '@app/constants';\nimport {InstanceType} from '@app/utils';\nimport { useSharedContext } from '@app/context';\nimport './ServiceRegistry.css';\n\nexport const ServiceRegistry: React.FC = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || {srs:{apiBasePath:''}};\n\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useRootModalContext();\n  const { preCreateInstance, shouldOpenCreateModal,tokenEndPointUrl } = useSharedContext() || {};\n  const {page=1, perPage=10}=usePagination() || {};\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [selectedRegistryInstance, setSelectedRegistryInstance] = useState<RegistryRest | undefined>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean>(false);\n  const [isUnauthorizedUser, setIsUnauthorizedUser] = useState<boolean>(false);\n  const [registries, setRegistries] = useState<RegistryListRest | undefined>(undefined);\n  const [registryItems, setRegistryItems] = useState<RegistryRest[] | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n\n  const hasUserTrialInstance = registryItems?.some((r) => r?.instance_type === InstanceType?.eval);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, []);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    updateServiceRegistryInstance();\n  }, [registryItems]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen = shouldOpenCreateModal && (await shouldOpenCreateModal());\n      shouldOpen && openCreateModal();\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  const updateServiceRegistryInstance = () => {\n    if (registryItems && registryItems?.length > 0) {\n      const selectedRegistryItem = registryItems?.filter(\n        (registry) => registry?.id === selectedRegistryInstance?.id\n      )[0];\n      const newState: any = { ...selectedRegistryInstance, ...selectedRegistryItem };\n      selectedRegistryItem && setSelectedRegistryInstance(newState);\n    }\n  };\n\n  const fetchRegistries = async () => {\n    const accessToken = await auth?.srs.getToken();\n    if(basePath && accessToken){\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await api\n        .getRegistries()\n        .then((res) => {\n          const registry = res?.data;\n          setRegistries(registry);\n          setRegistryItems(registry?.items);\n        })\n        .catch((error) => {\n          //todo: handle error\n        });\n    }    \n  };\n\n  useTimeout(() => fetchRegistries(), MAX_POLL_INTERVAL);\n\n  const onConnectToRegistry = (instance: RegistryRest | undefined) => {\n    setIsExpandedDrawer(true);\n    setSelectedRegistryInstance(instance);\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = (registry: RegistryRest | undefined) => {\n    const { name, status } = registry || {};\n    showModal(MODAL_TYPES.DELETE_SERVICE_REGISTRY, {\n      serviceRegistryStatus: status,\n      selectedItemData: registry,\n      fetchRegistries,\n      title: `${t('common.delete_service_registry_title')}?`,\n      confirmButtonProps: {\n        label: t('common.delete'),\n      },\n      textProps: {\n        description: t('common.delete_service_registry_description', { name }),\n      },\n    });\n  };\n\n  const getAccessToServiceRegistry = () => {\n    /**\n     * Todo: integrate get access service registry api\n     */\n  };\n\n  const openCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_REGISTRY, {\n      fetchServiceRegistries: fetchRegistries,\n      hasUserTrialInstance\n    });\n  };\n\n  const createServiceRegistry = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && openCreateModal();\n  };\n\n  if (isUnauthorizedUser) {\n    return <UnauthrizedUser getAccessToServiceRegistry={getAccessToServiceRegistry} />;\n  }\n\n  if (registryItems === undefined) {\n    return (\n      <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <MASLoading />\n      </PageSection>\n    );\n  } else {\n    if (!registryItems?.length) {\n      return (\n        <>\n          <ServiceRegistryHeader />\n          <ServiceRegistryEmptyState onCreateserviceRegistry={createServiceRegistry} />\n        </>\n      );\n    } else {\n      return (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={selectedRegistryInstance === undefined}\n          notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          onClose={onCloseDrawer}\n          registry={selectedRegistryInstance}\n        >\n          <main className=\"pf-c-page__main\">\n            <ServiceRegistryHeader\n              onConnectToRegistry={onConnectToRegistry}\n              onDeleteRegistry={onDeleteRegistry}\n              serviceRegistryDetails={selectedRegistryInstance}\n            />\n            <ServiceRegistryTableView\n              page={page}\n              perPage={perPage}\n              serviceRegistryItems={registryItems}\n              total={registries?.total}\n              onViewConnection={onConnectToRegistry}\n              onDelete={onDeleteRegistry}\n              expectedTotal={0}\n              orderBy={orderBy}\n              setOrderBy={setOrderBy}\n              loggedInUser={loggedInUser}\n              currentUserRegistries={registryItems}\n              handleCreateModal={createServiceRegistry}\n              refresh={fetchRegistries}\n              registryDataLoaded={false}\n              isDrawerOpen={isExpandedDrawer}\n            />\n          </main>\n        </ServiceRegistryDrawer>\n      );\n    }\n  }\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { RootModal, PaginationProvider } from '@app/components';\nimport srsi18n from '@i18n/i18n';\nimport { SharedContext, SharedContextrops } from '@app/context';\n\ntype ServiceRegistryFederatedProps = SharedContextrops;\n\nconst ServiceRegistryFederated: React.FC<ServiceRegistryFederatedProps> = ({\n  preCreateInstance,\n  shouldOpenCreateModal,\n  tokenEndPointUrl,\n}) => {\n  return (\n    <I18nextProvider i18n={srsi18n}>\n      <SharedContext.Provider value={{ preCreateInstance, shouldOpenCreateModal, tokenEndPointUrl }}>\n        <RootModal>\n          <PaginationProvider>\n            <ServiceRegistry />\n          </PaginationProvider>\n        </RootModal>\n      </SharedContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default ServiceRegistryFederated;\n","import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { withTranslation, WithTranslation } from 'react-i18next';\nimport { PageSection, Button } from '@patternfly/react-core';\nimport { MASEmptyState, MASEmptyStateVariant } from '@app/components';\nimport './MASErrorBoundary.css';\n\ntype Props = WithTranslation &\n  RouteComponentProps & {\n    children?: ReactNode;\n  };\n\ntype State = {\n  hasError?: boolean;\n};\n\nclass MASErrorBoundary extends Component<Props, State> {\n  state: State = {\n    hasError: false,\n  };\n\n  static getDerivedStateFromError(_: Error): State {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('error:', error, errorInfo);\n  }\n\n  onClickButton = () => {\n    const { history } = this.props;\n    this.setState({ hasError: false });\n    history && history.push('/');\n  };\n\n  render() {\n    const { t } = this.props;\n    const { hasError } = this.state;\n\n    if (hasError) {\n      return (\n        <PageSection padding={{ default: 'noPadding' }} isFilled>\n          <MASEmptyState\n            emptyStateProps={{\n              variant: MASEmptyStateVariant.UnexpectedError,\n            }}\n            emptyStateIconProps={{\n              className: 'icon-color',\n            }}\n            titleProps={{\n              title: t('common.something_went_wrong'),\n            }}\n            emptyStateBodyProps={{\n              body: t('unexpected_error'),\n            }}\n          >\n            <Button onClick={this.onClickButton}>{t('common.go_to_kafka_instances')}</Button>\n          </MASEmptyState>\n        </PageSection>\n      );\n    }\n    return this.props.children;\n  }\n}\n\nconst MASErrorBoundaryComponent = withRouter(withTranslation()(MASErrorBoundary));\nexport { MASErrorBoundaryComponent as MASErrorBoundary };\n","import React, { useContext } from 'react';\n\nexport type SharedContextrops = {\n    preCreateInstance?: (isOpen: boolean) => Promise<boolean>;\n    shouldOpenCreateModal?: () => Promise<boolean>;\n    tokenEndPointUrl?:  string;\n};\n\nexport const SharedContext = React.createContext<SharedContextrops | undefined>(undefined);\nexport const useSharedContext = (): SharedContextrops | undefined => useContext(SharedContext);\n","import { AxiosError } from 'axios';\n\nexport interface IApiErrorData {\n  code: string;\n  href: string;\n  id: number;\n  kind: string;\n  reason: string;\n}\n\nconst isServiceApiError = (error: Error): error is AxiosError<IApiErrorData> => {\n  return (error as AxiosError<IApiErrorData>).response?.data.code !== undefined;\n};\n\nenum ErrorCodes {\n  USER_ALREADY_HAVE_TRIAL_INSTANCE = 'SRS-MGMT-13',\n  INSUFFICIENT_QUOTA = 'SRS-MGMT-14',\n  INSUFFICIENT_STANDARD_QUOTA='SRS-MGMT-7',\n  FAILED_TO_CHECK_QUOTA = 'SRS-MGMT-11',\n}\n\nexport { isServiceApiError, ErrorCodes };\n","import { formatDistance } from 'date-fns';\n\nfunction accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\n\nconst getModalAppendTo = (): HTMLElement | undefined => document.querySelector('#qs-content') as HTMLElement || document.body;\n\nconst MAX_SERVICE_REGISTRY_NAME_LENGTH = 32;\nconst MAX_SERVICE_REGISTRY_DESC_LENGTH = 255;\n\nconst statusOptions = [\n  { value: 'ready', label: 'Ready' },\n  { value: 'failed', label: 'Failed' },\n  { value: 'accepted', label: 'Creation pending' },\n  { value: 'provisioning', label: 'Creation in progress' },\n  { value: 'preparing', label: 'Creation in progress' },\n  { value: 'deprovision', label: 'Deletion in progress' },\n  { value: 'deleting', label: 'Deletion in progress' },\n];\n\nconst getFormattedDate = (date: string | Date, translatePostfix: string): string => {\n  date = typeof date === 'string' ? new Date(date) : date;\n  return formatDistance(date, new Date()) + ' ' + translatePostfix;\n};\n\nenum InstanceType {\n  eval = 'eval',\n  standard = 'standard',\n}\n\nexport {\n  accessibleRouteChangeHandler,\n  getModalAppendTo,\n  MAX_SERVICE_REGISTRY_NAME_LENGTH,\n  MAX_SERVICE_REGISTRY_DESC_LENGTH,\n  statusOptions,\n  getFormattedDate,\n  InstanceType\n};"],"names":["ServiceRegistry","t","useTranslation","auth","useAuth","basePath","useConfig","srs","apiBasePath","showModal","useAlert","preCreateInstance","shouldOpenCreateModal","page","perPage","useState","isExpandedDrawer","setIsExpandedDrawer","undefined","selectedRegistryInstance","setSelectedRegistryInstance","notRequiredDrawerContentBackground","isUnauthorizedUser","registries","setRegistries","registryItems","setRegistryItems","loggedInUser","setLoggedInUser","orderBy","setOrderBy","hasUserTrialInstance","some","r","instance_type","useEffect","fetchRegistries","getUsername","then","username","updateServiceRegistryInstance","openCreateModal","callback","delay","savedCallback","length","selectedRegistryItem","filter","registry","id","newState","getToken","accessToken","RegistriesApi","Configuration","getRegistries","res","data","items","catch","error","useRef","current","setTimeout","clearInterval","onConnectToRegistry","instance","onDeleteRegistry","name","status","serviceRegistryStatus","selectedItemData","title","confirmButtonProps","label","textProps","description","fetchServiceRegistries","createServiceRegistry","open","getAccessToServiceRegistry","PageSection","variant","PageSectionVariants","padding","default","isExpanded","isLoading","onClose","className","serviceRegistryDetails","serviceRegistryItems","total","onViewConnection","onDelete","expectedTotal","currentUserRegistries","handleCreateModal","refresh","registryDataLoaded","isDrawerOpen","onCreateserviceRegistry","tokenEndPointUrl","I18nextProvider","i18n","value","state","hasError","onClickButton","history","props","setState","push","getDerivedStateFromError","_","componentDidCatch","errorInfo","console","render","this","isFilled","MASEmptyState","emptyStateProps","emptyStateIconProps","titleProps","emptyStateBodyProps","body","Button","onClick","children","Component","withRouter","withTranslation","SharedContext","useSharedContext","useContext","ErrorCodes","isServiceApiError","response","code","InstanceType","getModalAppendTo","document","querySelector","MAX_SERVICE_REGISTRY_NAME_LENGTH","statusOptions","getFormattedDate","date","translatePostfix","Date","formatDistance"],"sourceRoot":""}