{"version":3,"file":"961.78cce490.js","mappings":"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","sources":["webpack://srs-ui/./src/app/constants/constants.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistry.tsx","webpack://srs-ui/./src/app/hooks/useTimeOut.ts","webpack://srs-ui/./src/app/ServiceRegistry/ServiceRegistryFederated.tsx"],"sourcesContent":["const MAX_POLL_INTERVAL = 5000;\n\nexport { MAX_POLL_INTERVAL };","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { PageSection, PageSectionVariants } from '@patternfly/react-core';\nimport { Configuration, RegistryListRest, Registry, RegistriesApi } from '@rhoas/registry-management-sdk';\nimport { useAuth, useConfig, useBasename, useAlert } from '@rhoas/app-services-ui-shared';\nimport {\n  ServiceRegistryDrawer,\n  UnauthrizedUser,\n  ServiceRegistryEmptyState,\n  ServiceRegistryTableView,\n} from './components';\nimport { ServiceRegistryHeader } from '@app/ServiceRegistry/components';\nimport { MASLoading, useRootModalContext, MODAL_TYPES, usePagination } from '@app/components';\nimport { useTimeout } from '@app/hooks';\nimport { MAX_POLL_INTERVAL } from '@app/constants';\nimport {InstanceType} from '@app/utils';\nimport { useSharedContext } from '@app/context';\nimport './ServiceRegistry.css';\n\nexport const ServiceRegistry: React.FC = () => {\n  const { t } = useTranslation();\n  const auth = useAuth();\n  const {\n    srs: { apiBasePath: basePath },\n  } = useConfig() || {srs:{apiBasePath:''}};\n\n  const { addAlert } = useAlert() || {};\n  const { showModal } = useRootModalContext();\n  const { preCreateInstance, shouldOpenCreateModal,tokenEndPointUrl } = useSharedContext() || {};\n  const {page=1, perPage=10}=usePagination() || {};\n\n  const [isExpandedDrawer, setIsExpandedDrawer] = useState<boolean>(false);\n  const [selectedRegistryInstance, setSelectedRegistryInstance] = useState<Registry | undefined>(undefined);\n  const [notRequiredDrawerContentBackground, setNotRequiredDrawerContentBackground] = useState<boolean>(false);\n  const [isUnauthorizedUser, setIsUnauthorizedUser] = useState<boolean>(false);\n  const [registries, setRegistries] = useState<RegistryListRest | undefined>(undefined);\n  const [registryItems, setRegistryItems] = useState<Registry[] | undefined>(undefined);\n  const [loggedInUser, setLoggedInUser] = useState<string | undefined>(undefined);\n  const [orderBy, setOrderBy] = useState<string>('name asc');\n\n  const hasUserTrialInstance = registryItems?.some((r) => r?.instance_type === InstanceType?.eval && r.owner===loggedInUser);\n\n  useEffect(() => {\n    fetchRegistries();\n  }, []);\n\n  useEffect(() => {\n    auth?.getUsername().then((username) => setLoggedInUser(username));\n  }, [auth]);\n\n  useEffect(() => {\n    updateServiceRegistryInstance();\n  }, [registryItems]);\n\n  useEffect(() => {\n    const openModal = async () => {\n      const shouldOpen = shouldOpenCreateModal && (await shouldOpenCreateModal());\n      shouldOpen && openCreateModal();\n    };\n    openModal();\n  }, [shouldOpenCreateModal]);\n\n  const updateServiceRegistryInstance = () => {\n    if (registryItems && registryItems?.length > 0) {\n      const selectedRegistryItem = registryItems?.filter(\n        (registry) => registry?.id === selectedRegistryInstance?.id\n      )[0];\n      const newState: any = { ...selectedRegistryInstance, ...selectedRegistryItem };\n      selectedRegistryItem && setSelectedRegistryInstance(newState);\n    }\n  };\n\n  const fetchRegistries = async () => {\n    const accessToken = await auth?.srs.getToken();\n    if(basePath && accessToken){\n      const api = new RegistriesApi(\n        new Configuration({\n          accessToken,\n          basePath,\n        })\n      );\n      await api\n        .getRegistries()\n        .then((res) => {\n          const registry = res?.data;\n          setRegistries(registry);\n          setRegistryItems(registry?.items);\n        })\n        .catch((error) => {\n          //todo: handle error\n        });\n    }    \n  };\n\n  useTimeout(() => fetchRegistries(), MAX_POLL_INTERVAL);\n\n  const onConnectToRegistry = (instance: Registry | undefined) => {\n    setIsExpandedDrawer(true);\n    setSelectedRegistryInstance(instance);\n  };\n\n  const onCloseDrawer = () => {\n    setIsExpandedDrawer(false);\n  };\n\n  const onDeleteRegistry = (registry: Registry | undefined) => {\n    const { name, status } = registry || {};\n    showModal(MODAL_TYPES.DELETE_SERVICE_REGISTRY, {\n      serviceRegistryStatus: status,\n      selectedItemData: registry,\n      fetchRegistries,\n      title: `${t('common.delete_service_registry_title')}?`,\n      confirmButtonProps: {\n        label: t('common.delete'),\n      },\n      textProps: {\n        description: t('common.delete_service_registry_description', { name }),\n      },\n    });\n  };\n\n  const getAccessToServiceRegistry = () => {\n    /**\n     * Todo: integrate get access service registry api\n     */\n  };\n\n  const openCreateModal = () => {\n    showModal(MODAL_TYPES.CREATE_SERVICE_REGISTRY, {\n      fetchServiceRegistries: fetchRegistries,\n      hasUserTrialInstance\n    });\n  };\n\n  const createServiceRegistry = async () => {\n    let open;\n    if (preCreateInstance) {\n      // Callback before opening create dialog\n      // The callback can override the new state of opening\n      open = await preCreateInstance(true);\n    }\n    open && openCreateModal();\n  };\n\n  if (isUnauthorizedUser) {\n    return <UnauthrizedUser getAccessToServiceRegistry={getAccessToServiceRegistry} />;\n  }\n\n  if (registryItems === undefined) {\n    return (\n      <PageSection variant={PageSectionVariants.light} padding={{ default: 'noPadding' }}>\n        <MASLoading />\n      </PageSection>\n    );\n  } else {\n    if (!registryItems?.length) {\n      return (\n        <>\n          <ServiceRegistryHeader />\n          <ServiceRegistryEmptyState onCreateserviceRegistry={createServiceRegistry} />\n        </>\n      );\n    } else {\n      return (\n        <ServiceRegistryDrawer\n          isExpanded={isExpandedDrawer}\n          isLoading={selectedRegistryInstance === undefined}\n          notRequiredDrawerContentBackground={notRequiredDrawerContentBackground}\n          onClose={onCloseDrawer}\n          registry={selectedRegistryInstance}\n        >\n        <main className=\"pf-c-page__main\">\n          <ServiceRegistryHeader\n            onConnectToRegistry={onConnectToRegistry}\n            onDeleteRegistry={onDeleteRegistry}\n            serviceRegistryDetails={selectedRegistryInstance}\n          />\n          <ServiceRegistryTableView\n            page={page}\n            perPage={perPage}\n            serviceRegistryItems={registryItems}\n            total={registries?.total}\n            onViewConnection={onConnectToRegistry}\n            onDelete={onDeleteRegistry}\n            expectedTotal={0}\n            orderBy={orderBy}\n            setOrderBy={setOrderBy}\n            loggedInUser={loggedInUser}\n            currentUserRegistries={registryItems}\n            handleCreateModal={createServiceRegistry}\n            refresh={fetchRegistries}\n            registryDataLoaded={false}\n            isDrawerOpen={isExpandedDrawer}\n          />\n        </main>\n        </ServiceRegistryDrawer>\n      );\n    }\n  }\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useTimeout<T>(callback: T, delay: number): void {\n  const savedCallback = useRef<any>();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setTimeout(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n    return;\n  }, [callback, delay]);\n}\n","import React from 'react';\nimport { I18nextProvider } from 'react-i18next';\nimport { ServiceRegistry } from './ServiceRegistry';\nimport { RootModal, PaginationProvider } from '@app/components';\nimport srsi18n from '@i18n/i18n';\nimport { SharedContext, SharedContextrops } from '@app/context';\n\ntype ServiceRegistryFederatedProps = SharedContextrops;\n\nconst ServiceRegistryFederated: React.FC<ServiceRegistryFederatedProps> = ({\n  preCreateInstance,\n  shouldOpenCreateModal,\n  tokenEndPointUrl,\n}) => {\n  return (\n    <I18nextProvider i18n={srsi18n}>\n      <SharedContext.Provider value={{ preCreateInstance, shouldOpenCreateModal, tokenEndPointUrl }}>\n        <RootModal>\n          <PaginationProvider>\n            <ServiceRegistry />\n          </PaginationProvider>\n        </RootModal>\n      </SharedContext.Provider>\n    </I18nextProvider>\n  );\n};\n\nexport default ServiceRegistryFederated;\n"],"names":["ServiceRegistry","t","useTranslation","auth","useAuth","basePath","useConfig","srs","apiBasePath","showModal","useAlert","preCreateInstance","shouldOpenCreateModal","page","perPage","useState","isExpandedDrawer","setIsExpandedDrawer","undefined","selectedRegistryInstance","setSelectedRegistryInstance","notRequiredDrawerContentBackground","isUnauthorizedUser","registries","setRegistries","registryItems","setRegistryItems","loggedInUser","setLoggedInUser","orderBy","setOrderBy","hasUserTrialInstance","some","r","instance_type","owner","useEffect","fetchRegistries","getUsername","then","username","updateServiceRegistryInstance","openCreateModal","callback","delay","savedCallback","length","selectedRegistryItem","filter","registry","id","newState","getToken","accessToken","RegistriesApi","Configuration","getRegistries","res","data","items","catch","error","useRef","current","setTimeout","clearInterval","onConnectToRegistry","instance","onDeleteRegistry","name","status","serviceRegistryStatus","selectedItemData","title","confirmButtonProps","label","textProps","description","fetchServiceRegistries","createServiceRegistry","open","getAccessToServiceRegistry","PageSection","variant","PageSectionVariants","padding","default","isExpanded","isLoading","onClose","className","serviceRegistryDetails","serviceRegistryItems","total","onViewConnection","onDelete","expectedTotal","currentUserRegistries","handleCreateModal","refresh","registryDataLoaded","isDrawerOpen","onCreateserviceRegistry","tokenEndPointUrl","I18nextProvider","i18n","value"],"sourceRoot":""}